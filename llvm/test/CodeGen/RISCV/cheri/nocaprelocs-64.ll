; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:  | FileCheck -check-prefix=CAM %s
; RUN: %riscv64_bakewell_purecap_llc -verify-machineinstrs < %s \
; RUN:  | FileCheck -check-prefix=BWL %s
@value = external addrspace(200) global i32, align 4

; Function Attrs: nocaprelocs noinline nounwind optnone
define dso_local void @noreloc() addrspace(200) #0 {
; CAM-LABEL: noreloc:
; CAM:       # %bb.0: # %entry
; CAM-NEXT:    cincoffset csp, csp, -16
; CAM-NEXT:  .LBB0_1: # %entry
; CAM-NEXT:    # Label of block must be emitted
; CAM-NEXT:    auipc ca0, %pcrel_hi(value)
; CAM-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB0_1)
; CAM-NEXT:    sc ca0, 0(csp)
; CAM-NEXT:    cincoffset csp, csp, 16
; CAM-NEXT:    ret
;
; BWL-LABEL: noreloc:
; BWL:       # %bb.0: # %entry
; BWL-NEXT:    caddi csp, csp, -16
; BWL-NEXT:  .LBB0_1: # %entry
; BWL-NEXT:    # Label of block must be emitted
; BWL-NEXT:    auipc ca0, %pcrel_hi(value)
; BWL-NEXT:    caddi ca0, ca0, %pcrel_lo(.LBB0_1)
; BWL-NEXT:    sc ca0, 0(csp)
; BWL-NEXT:    caddi csp, csp, 16
; BWL-NEXT:    ret
entry:
  %y = alloca ptr addrspace(200), align 16, addrspace(200)
  store ptr addrspace(200) @value, ptr addrspace(200) %y, align 16
  ret void
}

; Function Attrs: noinline nounwind optnone
define dso_local void @withreloc() addrspace(200) #1 {
; CAM-LABEL: withreloc:
; CAM:       # %bb.0: # %entry
; CAM-NEXT:    cincoffset csp, csp, -16
; CAM-NEXT:  .LBB1_1: # %entry
; CAM-NEXT:    # Label of block must be emitted
; CAM-NEXT:    auipc ca0, %captab_pcrel_hi(value)
; CAM-NEXT:    lc ca0, %pcrel_lo(.LBB1_1)(ca0)
; CAM-NEXT:    sc ca0, 0(csp)
; CAM-NEXT:    cincoffset csp, csp, 16
; CAM-NEXT:    ret
;
; BWL-LABEL: withreloc:
; BWL:       # %bb.0: # %entry
; BWL-NEXT:    caddi csp, csp, -16
; BWL-NEXT:  .LBB1_1: # %entry
; BWL-NEXT:    # Label of block must be emitted
; BWL-NEXT:    auipc ca0, %captab_pcrel_hi(value)
; BWL-NEXT:    lc ca0, %pcrel_lo(.LBB1_1)(ca0)
; BWL-NEXT:    sc ca0, 0(csp)
; BWL-NEXT:    caddi csp, csp, 16
; BWL-NEXT:    ret
entry:
  %y = alloca ptr addrspace(200), align 16, addrspace(200)
  store ptr addrspace(200) @value, ptr addrspace(200) %y, align 16
  ret void
}

attributes #0 = { nocaprelocs noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+64bit,+cap-mode,+xcheri" }
attributes #1 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+64bit,+cap-mode,+xcheri" }

