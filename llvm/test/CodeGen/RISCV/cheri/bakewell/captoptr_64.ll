; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv64_bakewell_hybrid_llc < %s \
; RUN:   | FileCheck --check-prefix=RV64LEGACY %s

define dso_local void @captoptr(i8 addrspace(200)* noundef %foo) {
; RV64LEGACY-LABEL: captoptr:
; RV64LEGACY:       # %bb.0: # %entry
; RV64LEGACY-NEXT:    addi sp, sp, -32
; RV64LEGACY-NEXT:    .cfi_def_cfa_offset 32
; RV64LEGACY-NEXT:    sc ca0, 16(sp)
; RV64LEGACY-NEXT:    gctag a1, ca0
; RV64LEGACY-NEXT:    neg a1, a1
; RV64LEGACY-NEXT:    and a0, a0, a1
; RV64LEGACY-NEXT:    sd a0, 8(sp)
; RV64LEGACY-NEXT:    addi sp, sp, 32
; RV64LEGACY-NEXT:    ret
entry:
  %foo.addr = alloca i8 addrspace(200)*, align 16
  %bar = alloca i8*, align 8
  store i8 addrspace(200)* %foo, i8 addrspace(200)** %foo.addr, align 16
  %0 = load i8 addrspace(200)*, i8 addrspace(200)** %foo.addr, align 16
  %1 = load i8 addrspace(200)*, i8 addrspace(200)** %foo.addr, align 16
  %2 = call i64 @llvm.cheri.cap.to.pointer.i64(i8 addrspace(200)* %0, i8 addrspace(200)* %1)
  %3 = inttoptr i64 %2 to i8*
  store i8* %3, i8** %bar, align 8
  ret void
}

declare i64 @llvm.cheri.cap.to.pointer.i64(i8 addrspace(200)*, i8 addrspace(200)*)
