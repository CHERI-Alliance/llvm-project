; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv64_bakewell_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=RV64PURECAP %s

define dso_local signext i32 @capdiff(i32 addrspace(200)* noundef %a, i32 addrspace(200)* noundef %b) addrspace(200) {
; RV64PURECAP-LABEL: capdiff:
; RV64PURECAP:       # %bb.0: # %entry
; RV64PURECAP-NEXT:    caddi csp, csp, -32
; RV64PURECAP-NEXT:    .cfi_def_cfa_offset 32
; RV64PURECAP-NEXT:    sc ca0, 16(csp)
; RV64PURECAP-NEXT:    sub a0, a0, a1
; RV64PURECAP-NEXT:    srli a0, a0, 2
; RV64PURECAP-NEXT:    sext.w a0, a0
; RV64PURECAP-NEXT:    sc ca1, 0(csp)
; RV64PURECAP-NEXT:    caddi csp, csp, 32
; RV64PURECAP-NEXT:    ret
entry:

  %a.addr = alloca i32 addrspace(200)*, align 16, addrspace(200)
  %b.addr = alloca i32 addrspace(200)*, align 16, addrspace(200)
  store i32 addrspace(200)* %a, i32 addrspace(200)* addrspace(200)* %a.addr, align 16
  store i32 addrspace(200)* %b, i32 addrspace(200)* addrspace(200)* %b.addr, align 16
  %0 = load i32 addrspace(200)*, i32 addrspace(200)* addrspace(200)* %a.addr, align 16
  %1 = load i32 addrspace(200)*, i32 addrspace(200)* addrspace(200)* %b.addr, align 16
  %2 = bitcast i32 addrspace(200)* %0 to i8 addrspace(200)*
  %3 = bitcast i32 addrspace(200)* %1 to i8 addrspace(200)*
  %4 = call i64 @llvm.cheri.cap.diff.i64(i8 addrspace(200)* %2, i8 addrspace(200)* %3)
  %sub.ptr.div = sdiv exact i64 %4, 4
  %conv = trunc i64 %sub.ptr.div to i32
  ret i32 %conv
}

declare i64 @llvm.cheri.cap.diff.i64(i8 addrspace(200)*, i8 addrspace(200)*) addrspace(200)
