; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+zcheripurecap,+cap-mode -target-abi=l64pc128d -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefixes=ZCHERIPURECAP
; RUN: llc -mtriple=riscv64 -mattr=+m,+zba,+zcheripurecap,+cap-mode -target-abi=l64pc128d -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefixes=ZCHERIPURECAPZBA


define i8 @adduw(i32 signext %0, ptr addrspace(200) %1) nounwind {
; ZCHERIPURECAP-LABEL: adduw:
; ZCHERIPURECAP:       # %bb.0:
; ZCHERIPURECAP-NEXT:    slli a0, a0, 32
; ZCHERIPURECAP-NEXT:    srli a0, a0, 32
; ZCHERIPURECAP-NEXT:    cadd ca0, ca1, a0
; ZCHERIPURECAP-NEXT:    lb a0, 0(ca0)
; ZCHERIPURECAP-NEXT:    ret
;
; ZCHERIPURECAPZBA-LABEL: adduw:
; ZCHERIPURECAPZBA:       # %bb.0:
; ZCHERIPURECAPZBA-NEXT:    add.uw ca0, a0, ca1
; ZCHERIPURECAPZBA-NEXT:    lb a0, 0(ca0)
; ZCHERIPURECAPZBA-NEXT:    ret
  %3 = zext i32 %0 to i64
  %4 = getelementptr inbounds i8, ptr addrspace(200) %1, i64 %3
  %5 = load i8, ptr addrspace(200) %4
  ret i8 %5
}

define signext i16 @sh1adduw(i32 signext %0, ptr addrspace(200) %1){
; ZCHERIPURECAP-LABEL: sh1adduw:
; ZCHERIPURECAP:       # %bb.0:
; ZCHERIPURECAP-NEXT:    slli a0, a0, 32
; ZCHERIPURECAP-NEXT:    srli a0, a0, 31
; ZCHERIPURECAP-NEXT:    cadd ca0, ca1, a0
; ZCHERIPURECAP-NEXT:    lh a0, 0(ca0)
; ZCHERIPURECAP-NEXT:    ret
;
; ZCHERIPURECAPZBA-LABEL: sh1adduw:
; ZCHERIPURECAPZBA:       # %bb.0:
; ZCHERIPURECAPZBA-NEXT:    sh1add.uw ca0, a0, ca1
; ZCHERIPURECAPZBA-NEXT:    lh a0, 0(ca0)
; ZCHERIPURECAPZBA-NEXT:    ret
    %3 = zext i32 %0 to i64
    %4 = getelementptr inbounds i16, ptr addrspace(200) %1, i64 %3
    %5 = load i16, ptr addrspace(200) %4
    ret i16 %5
}


define signext i32 @sh2adduw(i32 signext %0, ptr addrspace(200) %1) {
; ZCHERIPURECAP-LABEL: sh2adduw:
; ZCHERIPURECAP:       # %bb.0:
; ZCHERIPURECAP-NEXT:    slli a0, a0, 32
; ZCHERIPURECAP-NEXT:    srli a0, a0, 30
; ZCHERIPURECAP-NEXT:    cadd ca0, ca1, a0
; ZCHERIPURECAP-NEXT:    lw a0, 0(ca0)
; ZCHERIPURECAP-NEXT:    ret
;
; ZCHERIPURECAPZBA-LABEL: sh2adduw:
; ZCHERIPURECAPZBA:       # %bb.0:
; ZCHERIPURECAPZBA-NEXT:    sh2add.uw ca0, a0, ca1
; ZCHERIPURECAPZBA-NEXT:    lw a0, 0(ca0)
; ZCHERIPURECAPZBA-NEXT:    ret
  %3 = zext i32 %0 to i64
  %4 = getelementptr inbounds i32, ptr addrspace(200) %1, i64 %3
  %5 = load i32, ptr addrspace(200) %4
  ret i32 %5
}

define i64 @sh3adduw(i32 signext %0, ptr addrspace(200) %1) {
; ZCHERIPURECAP-LABEL: sh3adduw:
; ZCHERIPURECAP:       # %bb.0:
; ZCHERIPURECAP-NEXT:    slli a0, a0, 32
; ZCHERIPURECAP-NEXT:    srli a0, a0, 29
; ZCHERIPURECAP-NEXT:    cadd ca0, ca1, a0
; ZCHERIPURECAP-NEXT:    ld a0, 0(ca0)
; ZCHERIPURECAP-NEXT:    ret
;
; ZCHERIPURECAPZBA-LABEL: sh3adduw:
; ZCHERIPURECAPZBA:       # %bb.0:
; ZCHERIPURECAPZBA-NEXT:    sh3add.uw ca0, a0, ca1
; ZCHERIPURECAPZBA-NEXT:    ld a0, 0(ca0)
; ZCHERIPURECAPZBA-NEXT:    ret
  %3 = zext i32 %0 to i64
  %4 = getelementptr inbounds i64, ptr addrspace(200) %1, i64 %3
  %5 = load i64, ptr addrspace(200) %4
  ret i64 %5
}

define i64 @adduw_2(i64 %a, i64 %b) nounwind {
; ZCHERIPURECAP-LABEL: adduw_2:
; ZCHERIPURECAP:       # %bb.0:
; ZCHERIPURECAP-NEXT:    slli a1, a1, 32
; ZCHERIPURECAP-NEXT:    srli a1, a1, 32
; ZCHERIPURECAP-NEXT:    add a0, a1, a0
; ZCHERIPURECAP-NEXT:    ret
;
; ZCHERIPURECAPZBA-LABEL: adduw_2:
; ZCHERIPURECAPZBA:       # %bb.0:
; ZCHERIPURECAPZBA-NEXT:    add.uw ca1, a1, cnull
; ZCHERIPURECAPZBA-NEXT:    add a0, a1, a0
; ZCHERIPURECAPZBA-NEXT:    ret
  %and = and i64 %b, 4294967295
  %add = add i64 %and, %a
  ret i64 %add
}
