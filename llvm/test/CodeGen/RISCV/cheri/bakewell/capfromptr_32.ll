; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv32_bakewell_hybrid_llc < %s \
; RUN:   | FileCheck --check-prefix=RV32LEGACY %s

define dso_local i8 addrspace(200)* @capfromptr(i8* noundef %foo, i8 addrspace(200)* noundef %bar) {
; RV32LEGACY-LABEL: capfromptr:
; RV32LEGACY:       # %bb.0: # %entry
; RV32LEGACY-NEXT:    addi sp, sp, -32
; RV32LEGACY-NEXT:    .cfi_def_cfa_offset 32
; RV32LEGACY-NEXT:    sw a0, 28(sp)
; RV32LEGACY-NEXT:    sc ca1, 16(sp)
; RV32LEGACY-NEXT:    bnez a0, .LBB0_2
; RV32LEGACY-NEXT:  # %bb.1: # %entry
; RV32LEGACY-NEXT:    cmv ca0, cnull
; RV32LEGACY-NEXT:    j .LBB0_3
; RV32LEGACY-NEXT:  .LBB0_2:
; RV32LEGACY-NEXT:    scaddr ca0, ca1, a0
; RV32LEGACY-NEXT:  .LBB0_3: # %entry
; RV32LEGACY-NEXT:    sc ca0, 8(sp)
; RV32LEGACY-NEXT:    addi sp, sp, 32
; RV32LEGACY-NEXT:    ret
entry:
  %foo.addr = alloca i8*, align 4
  %bar.addr = alloca i8 addrspace(200)*, align 8
  %x = alloca i8 addrspace(200)*, align 8
  store i8* %foo, i8** %foo.addr, align 4
  store i8 addrspace(200)* %bar, i8 addrspace(200)** %bar.addr, align 8
  %0 = load i8 addrspace(200)*, i8 addrspace(200)** %bar.addr, align 8
  %1 = load i8*, i8** %foo.addr, align 4
  %2 = ptrtoint i8* %1 to i32
  %3 = call i8 addrspace(200)* @llvm.cheri.cap.from.pointer.i32(i8 addrspace(200)* %0, i32 %2)
  store i8 addrspace(200)* %3, i8 addrspace(200)** %x, align 8
  %4 = load i8 addrspace(200)*, i8 addrspace(200)** %x, align 8
  ret i8 addrspace(200)* %4
}

declare i8 addrspace(200)* @llvm.cheri.cap.from.pointer.i32(i8 addrspace(200)*, i32)
