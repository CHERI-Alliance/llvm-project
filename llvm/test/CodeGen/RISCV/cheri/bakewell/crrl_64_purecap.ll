; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv64_bakewell_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=RV64PURECAP %s

define dso_local signext i32 @crrl(i32 noundef signext %len) addrspace(200) {
; RV64PURECAP-LABEL: crrl:
; RV64PURECAP:       # %bb.0: # %entry
; RV64PURECAP-NEXT:    caddi csp, csp, -16
; RV64PURECAP-NEXT:    .cfi_def_cfa_offset 16
; RV64PURECAP-NEXT:    cram a1, a0
; RV64PURECAP-NEXT:    not a2, a1
; RV64PURECAP-NEXT:    add a2, a0, a2
; RV64PURECAP-NEXT:    and a1, a2, a1
; RV64PURECAP-NEXT:    sext.w a1, a1
; RV64PURECAP-NEXT:    sw a0, 12(csp)
; RV64PURECAP-NEXT:    mv a0, a1
; RV64PURECAP-NEXT:    caddi csp, csp, 16
; RV64PURECAP-NEXT:    ret
entry:
  %len.addr = alloca i32, align 4, addrspace(200)
  store i32 %len, i32 addrspace(200)* %len.addr, align 4
  %0 = load i32, i32 addrspace(200)* %len.addr, align 4
  %conv = sext i32 %0 to i64
  %1 = call i64 @llvm.cheri.round.representable.length.i64(i64 %conv)
  %conv1 = trunc i64 %1 to i32
  ret i32 %conv1
}

declare i64 @llvm.cheri.round.representable.length.i64(i64) addrspace(200)
