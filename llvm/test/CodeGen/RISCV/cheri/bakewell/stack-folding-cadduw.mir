# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -mattr=+zcheripurecap,+cap-mode,+zba -target-abi=l64pc128d -run-pass=greedy -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.ll"
  target datalayout = "e-m:e-pf200:128:128:128:64-p:64:64-i64:64-i128:128-n64-S128-A200-P200-G200"
  target triple = "riscv64"

  ; Function Attrs: nounwind
  define i64 @test_zext_w(i64 %x, i32 %y) addrspace(200) #0 {
    tail call void asm sideeffect "", "~{x1},~{x3},~{x4},~{x5},~{x6},~{x7},~{x8},~{x9},~{x10},~{x11},~{x12},~{x13},~{x14},~{x15},~{x16},~{x17},~{x18},~{x19},~{x20},~{x21},~{x22},~{x23},~{x24},~{x25},~{x26},~{x27},~{x28},~{x29},~{x30},~{x31}"()
    %a = icmp eq i64 %x, 0
    br i1 %a, label %truebb, label %falsebb

  truebb:                                           ; preds = %0
    %b = zext i32 %y to i64
    ret i64 %b

  falsebb:                                          ; preds = %0
    ret i64 0
  }

  attributes #0 = { nounwind "target-features"="+zcheripurecap,+cap-mode,+zba" }

...
---
name:            test_zext_w
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: gpr }
  - { id: 1, class: gpr }
  - { id: 2, class: gpr }
  - { id: 3, class: gpr }
  - { id: 4, class: gpr }
  - { id: 5, class: gpcr }
  - { id: 6, class: gpr }
liveins:
  - { reg: '$x10', virtual-reg: '%0' }
  - { reg: '$x11', virtual-reg: '%1' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo:
  varArgsFrameIndex: 0
  varArgsSaveSize: 0
body:             |
  ; CHECK-LABEL: name: test_zext_w
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CSD $x11, %stack.0, 0 :: (store (s64) into %stack.0)
  ; CHECK-NEXT:   CSD $x10, %stack.1, 0 :: (store (s64) into %stack.1)
  ; CHECK-NEXT:   INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $x1, 12 /* clobber */, implicit-def early-clobber $x3, 12 /* clobber */, implicit-def early-clobber $x4, 12 /* clobber */, implicit-def dead early-clobber $x5, 12 /* clobber */, implicit-def dead early-clobber $x6, 12 /* clobber */, implicit-def dead early-clobber $x7, 12 /* clobber */, implicit-def dead early-clobber $x8, 12 /* clobber */, implicit-def dead early-clobber $x9, 12 /* clobber */, implicit-def dead early-clobber $x10, 12 /* clobber */, implicit-def dead early-clobber $x11, 12 /* clobber */, implicit-def dead early-clobber $x12, 12 /* clobber */, implicit-def dead early-clobber $x13, 12 /* clobber */, implicit-def dead early-clobber $x14, 12 /* clobber */, implicit-def dead early-clobber $x15, 12 /* clobber */, implicit-def dead early-clobber $x16, 12 /* clobber */, implicit-def dead early-clobber $x17, 12 /* clobber */, implicit-def dead early-clobber $x18, 12 /* clobber */, implicit-def dead early-clobber $x19, 12 /* clobber */, implicit-def dead early-clobber $x20, 12 /* clobber */, implicit-def dead early-clobber $x21, 12 /* clobber */, implicit-def dead early-clobber $x22, 12 /* clobber */, implicit-def dead early-clobber $x23, 12 /* clobber */, implicit-def dead early-clobber $x24, 12 /* clobber */, implicit-def dead early-clobber $x25, 12 /* clobber */, implicit-def dead early-clobber $x26, 12 /* clobber */, implicit-def dead early-clobber $x27, 12 /* clobber */, implicit-def dead early-clobber $x28, 12 /* clobber */, implicit-def dead early-clobber $x29, 12 /* clobber */, implicit-def dead early-clobber $x30, 12 /* clobber */, implicit-def dead early-clobber $x31
  ; CHECK-NEXT:   [[CLD:%[0-9]+]]:gpr = CLD %stack.1, 0 :: (load (s64) from %stack.1)
  ; CHECK-NEXT:   BNE [[CLD]], $x0, %bb.2
  ; CHECK-NEXT:   PseudoCBR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.truebb:
  ; CHECK-NEXT:   [[CLWU:%[0-9]+]]:gpr = CLWU %stack.0, 0 :: (load (s64) from %stack.0)
  ; CHECK-NEXT:   $x10 = COPY [[CLWU]]
  ; CHECK-NEXT:   PseudoCRET implicit $x10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.falsebb:
  ; CHECK-NEXT:   $x10 = COPY $x0
  ; CHECK-NEXT:   PseudoCRET implicit $x10
  bb.0 (%ir-block.0):
    successors: %bb.1(0x30000000), %bb.2(0x50000000)
    liveins: $x10, $x11

    %1:gpr = COPY $x11
    %0:gpr = COPY $x10
    INLINEASM &"", 1 /* sideeffect attdialect */, 12 /* clobber */, implicit-def dead early-clobber $x1, 12 /* clobber */, implicit-def early-clobber $x3, 12 /* clobber */, implicit-def early-clobber $x4, 12 /* clobber */, implicit-def dead early-clobber $x5, 12 /* clobber */, implicit-def dead early-clobber $x6, 12 /* clobber */, implicit-def dead early-clobber $x7, 12 /* clobber */, implicit-def dead early-clobber $x8, 12 /* clobber */, implicit-def dead early-clobber $x9, 12 /* clobber */, implicit-def dead early-clobber $x10, 12 /* clobber */, implicit-def dead early-clobber $x11, 12 /* clobber */, implicit-def dead early-clobber $x12, 12 /* clobber */, implicit-def dead early-clobber $x13, 12 /* clobber */, implicit-def dead early-clobber $x14, 12 /* clobber */, implicit-def dead early-clobber $x15, 12 /* clobber */, implicit-def dead early-clobber $x16, 12 /* clobber */, implicit-def dead early-clobber $x17, 12 /* clobber */, implicit-def dead early-clobber $x18, 12 /* clobber */, implicit-def dead early-clobber $x19, 12 /* clobber */, implicit-def dead early-clobber $x20, 12 /* clobber */, implicit-def dead early-clobber $x21, 12 /* clobber */, implicit-def dead early-clobber $x22, 12 /* clobber */, implicit-def dead early-clobber $x23, 12 /* clobber */, implicit-def dead early-clobber $x24, 12 /* clobber */, implicit-def dead early-clobber $x25, 12 /* clobber */, implicit-def dead early-clobber $x26, 12 /* clobber */, implicit-def dead early-clobber $x27, 12 /* clobber */, implicit-def dead early-clobber $x28, 12 /* clobber */, implicit-def dead early-clobber $x29, 12 /* clobber */, implicit-def dead early-clobber $x30, 12 /* clobber */, implicit-def dead early-clobber $x31
    BNE %0, $x0, %bb.2
    PseudoCBR %bb.1

  bb.1.truebb:
    %5:gpcr = C_ADD_UW %1, $c0
    $x10 = COPY %5.sub_cap_addr
    PseudoCRET implicit $x10

  bb.2.falsebb:
    $x10 = COPY $x0
    PseudoCRET implicit $x10

...
