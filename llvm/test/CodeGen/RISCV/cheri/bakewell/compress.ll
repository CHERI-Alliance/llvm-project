; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: cat %s > %t.tgtattr
; RUN: echo 'attributes #0 = { nounwind }' >> %t.tgtattr
; RUN: %riscv32_bakewell_purecap_llc -mattr=+c,+zcheripurecap,+cap-mode -filetype=obj < %t.tgtattr \
; RUN:   | llvm-objdump -d -M no-aliases - | FileCheck %s
; RUN: %riscv64_bakewell_purecap_llc -mattr=+c,+zcheripurecap,+cap-mode -filetype=obj < %t.tgtattr \
; RUN:   | llvm-objdump -d -M no-aliases - | FileCheck %s
; RUN: %riscv64_bakewell_purecap_llc -mattr=+c,+zcheripurecap,+cap-mode,+xcheri-norvc -filetype=obj < %t.tgtattr \
; RUN:   | llvm-objdump -d -M no-aliases --mattr=+zcheripurecap - | FileCheck %s --check-prefix=CHECK-NORVC

; RUN: cat %s > %t.fnattr
; RUN: echo 'attributes #0 = { nounwind "target-features"="+c,+zcheripurecap,+cap-mode" }' >> %t.fnattr
; RUN: %riscv32_bakewell_purecap_llc -filetype=obj < %t.fnattr \
; RUN:   | llvm-objdump -d --mattr=+c -M no-aliases - | FileCheck %s
; RUN: %riscv64_bakewell_purecap_llc -filetype=obj < %t.fnattr \
; RUN:   | llvm-objdump -d --mattr=+c -M no-aliases - | FileCheck %s
; RUN: cat %s > %t.fnattr
; RUN: echo 'attributes #0 = { nounwind "target-features"="+c,+zcheripurecap,+cap-mode,+xcheri-norvc" }' >> %t.fnattr
; RUN: %riscv64_bakewell_purecap_llc -filetype=obj < %t.fnattr \
; RUN:   | llvm-objdump -d --mattr=+c -M no-aliases --mattr=+zcheripurecap - | FileCheck %s --check-prefix=CHECK-NORVC


define i32 @loadstore(ptr addrspace(200) %intptrarg, ptr addrspace(200) %ptrptrarg) addrspace(200) #0 {
; CHECK-LABEL: <loadstore>:
; CHECK-NEXT:    c.cincoffset16csp csp, -32
; CHECK-NEXT:    c.clw a2, 0(ca0)
; CHECK-NEXT:    c.li a3, 1
; CHECK-NEXT:    c.csw a3, 0(ca0)
; CHECK-NEXT:    c.clc ca0, 0(ca1)
; CHECK-NEXT:    c.csc ca0, 0(ca1)
; CHECK-NEXT:    c.csccsp ca0, 16(csp)
; CHECK-NEXT:    c.clccsp ca0, 16(csp)
; CHECK-NEXT:    c.cswcsp a2, 0(csp)
; CHECK-NEXT:    c.clwcsp a0, 0(csp)
; CHECK-NEXT:    addi a0, a2, 0
; CHECK-NEXT:    c.cincoffset16csp csp, 32
; CHECK-NEXT:    c.cjr cra
; CHECK-NORVC-LABEL: <loadstore>:
; CHECK-NORVC-NEXT:  {{[^a-z.]}}caddi csp, csp, -32
; CHECK-NORVC-NEXT:  {{[^a-z.]}}lw a2, 0(ca0)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}c.li a3, 1
; CHECK-NORVC-NEXT:  {{[^a-z.]}}sw a3, 0(ca0)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}lc ca0, 0(ca1)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}sc ca0, 0(ca1)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}sc ca0, 16(csp)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}lc ca0, 16(csp)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}sw a2, 0(csp)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}lw a0, 0(csp)
; CHECK-NORVC-NEXT:  {{[^a-z.]}}addi a0, a2, 0
; CHECK-NORVC-NEXT:  {{[^a-z.]}}caddi csp, csp, 32
; CHECK-NORVC-NEXT:  {{[^a-z.]}}jalr cnull, 0(cra)
  %stackptr = alloca ptr addrspace(200), align 16, addrspace(200)
  %stackint = alloca i32, align 16, addrspace(200)
  %val = load volatile i32, ptr addrspace(200) %intptrarg
  store volatile i32 1, ptr addrspace(200) %intptrarg
  %ptrval = load volatile ptr addrspace(200), ptr addrspace(200) %ptrptrarg
  store volatile ptr addrspace(200) %ptrval, ptr addrspace(200) %ptrptrarg
  store volatile ptr addrspace(200) %ptrval, ptr addrspace(200) %stackptr
  %stackptrval = load volatile ptr addrspace(200), ptr addrspace(200) %stackptr
  store volatile i32 %val, ptr addrspace(200) %stackint
  %stackintval = load volatile i32, ptr addrspace(200) %stackint
  ret i32 %val
}
