; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv32_bakewell_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=RV32PURECAP %s


define dso_local i32 @capdiff(i32 addrspace(200)* noundef %a, i32 addrspace(200)* noundef %b) addrspace(200) {
; RV32PURECAP-LABEL: capdiff:
; RV32PURECAP:       # %bb.0: # %entry
; RV32PURECAP-NEXT:    caddi csp, csp, -16
; RV32PURECAP-NEXT:    .cfi_def_cfa_offset 16
; RV32PURECAP-NEXT:    sc ca0, 8(csp)
; RV32PURECAP-NEXT:    sub a0, a0, a1
; RV32PURECAP-NEXT:    srai a0, a0, 2
; RV32PURECAP-NEXT:    sc ca1, 0(csp)
; RV32PURECAP-NEXT:    caddi csp, csp, 16
; RV32PURECAP-NEXT:    ret
entry:
  %a.addr = alloca i32 addrspace(200)*, align 8, addrspace(200)
  %b.addr = alloca i32 addrspace(200)*, align 8, addrspace(200)
  store i32 addrspace(200)* %a, i32 addrspace(200)* addrspace(200)* %a.addr, align 8
  store i32 addrspace(200)* %b, i32 addrspace(200)* addrspace(200)* %b.addr, align 8
  %0 = load i32 addrspace(200)*, i32 addrspace(200)* addrspace(200)* %a.addr, align 8
  %1 = load i32 addrspace(200)*, i32 addrspace(200)* addrspace(200)* %b.addr, align 8
  %2 = bitcast i32 addrspace(200)* %0 to i8 addrspace(200)*
  %3 = bitcast i32 addrspace(200)* %1 to i8 addrspace(200)*
  %4 = call i32 @llvm.cheri.cap.diff.i32(i8 addrspace(200)* %2, i8 addrspace(200)* %3)
  %sub.ptr.div = sdiv exact i32 %4, 4
  ret i32 %sub.ptr.div
}

declare i32 @llvm.cheri.cap.diff.i32(i8 addrspace(200)*, i8 addrspace(200)*) addrspace(200)
