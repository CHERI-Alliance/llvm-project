; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; This test caused assertion failures in MIPS DAG->DAG Pattern Instruction Selection
; RUN: %cheri_purecap_llc %s -o - | %cheri_FileCheck %s
; we should really be getting an error when compiling this with n64 ABI (alloca in AS 200)
; RUNTODO: not %cheri_llc -target-abi n64 < %s 2>&1 | FileCheck %s -check-prefix BAD-ABI
; BAD-ABI: error: abc

%struct.Dwarf_Error = type { [1024 x i32] }

@a = common local_unnamed_addr addrspace(200) global %struct.Dwarf_Error zeroinitializer, align 4

; Function Attrs: nounwind
define i32 @fn1() local_unnamed_addr #0 {
; CHECK-LABEL: fn1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $1, $zero, -8288
; CHECK-NEXT:    cincoffset $c11, $c11, $1
; CHECK-NEXT:    daddiu $1, $zero, 8280
; CHECK-NEXT:    csd $16, $1, 0($c11) # 8-byte Folded Spill
; CHECK-NEXT:    csc $c20, $zero, 8256($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c19, $zero, 8240($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c18, $zero, 8224($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 8208($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c20, $1
; CHECK-NEXT:    daddiu $16, $zero, 4096
; CHECK-NEXT:    daddiu $1, $zero, 4112
; CHECK-NEXT:    cincoffset $c18, $c11, $1
; CHECK-NEXT:    csetbounds $c18, $c18, $16
; CHECK-NEXT:    clcbi $c4, %captab20(a)($c20)
; CHECK-NEXT:    clcbi $c12, %capcall20(memcpy)($c20)
; CHECK-NEXT:    daddiu $4, $zero, 4096
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c18
; CHECK-NEXT:    clcbi $c12, %capcall20(memcpy)($c20)
; CHECK-NEXT:    daddiu $4, $zero, 4096
; CHECK-NEXT:    cmove $c19, $c11
; CHECK-NEXT:    cmove $c3, $c19
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c4, $c18
; CHECK-NEXT:    csetbounds $c1, $c19, $16
; CHECK-NEXT:    clcbi $c12, %capcall20(fn2)($c20)
; CHECK-NEXT:    ori $1, $zero, 65495
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    candperm $c13, $c1, $1
; CHECK-NEXT:    clc $c17, $zero, 8208($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 8224($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c19, $zero, 8240($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c20, $zero, 8256($c11) # 16-byte Folded Reload
; CHECK-NEXT:    daddiu $1, $zero, 8280
; CHECK-NEXT:    cld $16, $1, 0($c11) # 8-byte Folded Reload
; CHECK-NEXT:    daddiu $1, $zero, 8288
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, $1
entry:
  %tmp = alloca %struct.Dwarf_Error, align 8, addrspace(200)
  %0 = bitcast ptr addrspace(200) %tmp to ptr addrspace(200)
  call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) nonnull align 4 %0, ptr addrspace(200) align 4 @a, i64 4096, i1 false)
  %call = call i32 (...) @fn2(ptr addrspace(200) nonnull byval(%struct.Dwarf_Error) align 8 %tmp) #0
  ret i32 undef
}

; Function Attrs: nounwind
declare i32 @fn2(...) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noalias nocapture writeonly, ptr addrspace(200) noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.ident = !{!0}

!0 = !{!"clang version 5.0.0 (https://github.com/llvm-mirror/clang.git 0c91ed96d08feda61fd68f0fe034787f01cb9fa7) (https://github.com/llvm-mirror/llvm.git 6952b345731e6ea7246b4bc5173140b7fce21719)"}
