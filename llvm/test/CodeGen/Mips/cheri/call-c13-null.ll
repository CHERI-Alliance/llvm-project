; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: asserts
; RUN: %cheri_purecap_llc -o - -O2 -cheri-cap-table-abi=pcrel %s | %cheri_FileCheck %s -check-prefix CHECK
; RUN: %cheri_purecap_llc -o - -O1 -cheri-cap-table-abi=pcrel %s | %cheri_FileCheck %s -check-prefix CHECK
; RUN: %cheri_purecap_llc -o /dev/null -O2 -cheri-cap-table-abi=pcrel -debug-only=mips-lower %s 2>&1 | FileCheck %s -check-prefix DEBUG-OUTPUT-CHECK

@fn = common local_unnamed_addr addrspace(200) global ptr addrspace(200) null, align 32

declare ptr addrspace(200) @variadic(ptr addrspace(200), ...) addrspace(200)

declare ptr addrspace(200) @one_arg(ptr addrspace(200)) addrspace(200)

declare ptr addrspace(200) @many_cap_args(ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200),
                                          ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200),
                                          ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200)) addrspace(200)

; Check that the debug output prints
; DEBUG-OUTPUT-CHECK:      Clearing $c13 in call_one_arg_from_many_arg(is varargs: 0) callee = {{t[0-9]+}}: c128 = GlobalAddress<ptr addrspace(200) @one_arg> 0
; DEBUG-OUTPUT-CHECK-NEXT: Lowering return for function with $c13 live-in: call_one_arg_from_many_arg(is varargs: 0)
; DEBUG-OUTPUT-CHECK-NEXT: Clearing $c13 in call_one_arg_from_variadic_with_va_start(is varargs: 1) callee = {{t[0-9]+}}: c128 = GlobalAddress<ptr addrspace(200) @one_arg> 0
; DEBUG-OUTPUT-CHECK-NEXT: Lowering return for function with $c13 live-in: call_one_arg_from_variadic_with_va_start(is varargs: 1)
; DEBUG-OUTPUT-CHECK-NEXT: Clearing $c13 in call_one_arg_from_variadic_without_va_start(is varargs: 1) callee = {{t[0-9]+}}: c128 = GlobalAddress<ptr addrspace(200) @one_arg> 0
; DEBUG-OUTPUT-CHECK-NEXT: Lowering return for function with $c13 live-in: call_one_arg_from_variadic_without_va_start(is varargs: 1)
; DEBUG-OUTPUT-CHECK-NEXT: Clearing $c13 in call_variadic_no_onstack_from_varargs(is varargs: 1) callee = {{t[0-9]+}}: c128 = GlobalAddress<ptr addrspace(200) @variadic> 0
; DEBUG-OUTPUT-CHECK-NEXT: Lowering return for function with $c13 live-in: call_variadic_no_onstack_from_varargs(is varargs: 1)
; DEBUG-OUTPUT-CHECK-NEXT: Clearing $c13 in call_variadic_no_onstack_from_many_args(is varargs: 0) callee = {{t[0-9]+}}: c128 = GlobalAddress<ptr addrspace(200) @variadic> 0
; DEBUG-OUTPUT-CHECK-NEXT: Lowering return for function with $c13 live-in: call_variadic_no_onstack_from_many_args(is varargs: 0)

; CHECK-LABEL: .text
; CHECK-LABEL: .file

define void @call_variadic_one_onstack_long(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_variadic_one_onstack_long:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    daddiu $1, $zero, 42
; CHECK-NEXT:    csd $1, $zero, 0($c11)
; CHECK-NEXT:    csetbounds $c2, $c11, 8
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c1)
; CHECK-NEXT:    ori $1, $zero, 65495
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    candperm $c13, $c2, $1
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg, i64 42)
  ret void
}

define void @call_variadic_one_onstack_cap(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_variadic_one_onstack_cap:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c2, $1
; CHECK-NEXT:    cincoffset $c1, $c3, 77
; CHECK-NEXT:    cincoffset $c3, $c3, 87
; CHECK-NEXT:    csc $c3, $zero, 0($c11)
; CHECK-NEXT:    csetbounds $c3, $c11, 16
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c2)
; CHECK-NEXT:    ori $1, $zero, 65495
; CHECK-NEXT:    candperm $c13, $c3, $1
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c1
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %second_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 87
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg, ptr addrspace(200) %second_arg)
  ret void
}

define void @call_variadic_no_onstack(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_variadic_no_onstack:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_nonvariadic_one_arg(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_nonvariadic_one_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_one_arg_from_two_arg(ptr addrspace(200) %in_arg1, ptr addrspace(200) %in_arg2) addrspace(200) {
; CHECK-LABEL: call_one_arg_from_two_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_nonvariadic_many_args(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_nonvariadic_many_args:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -80
; CHECK-NEXT:    .cfi_def_cfa_offset 80
; CHECK-NEXT:    csc $c17, $zero, 64($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c2, $1
; CHECK-NEXT:    cincoffset $c1, $c3, 17
; CHECK-NEXT:    cincoffset $c4, $c3, 27
; CHECK-NEXT:    cincoffset $c5, $c3, 37
; CHECK-NEXT:    cincoffset $c6, $c3, 47
; CHECK-NEXT:    cincoffset $c7, $c3, 57
; CHECK-NEXT:    cincoffset $c8, $c3, 67
; CHECK-NEXT:    cincoffset $c9, $c3, 77
; CHECK-NEXT:    cincoffset $c10, $c3, 87
; CHECK-NEXT:    cincoffset $c12, $c3, 97
; CHECK-NEXT:    cincoffset $c13, $c3, 107
; CHECK-NEXT:    cincoffset $c14, $c3, 117
; CHECK-NEXT:    cincoffset $c3, $c3, 127
; CHECK-NEXT:    csc $c12, $zero, 0($c11)
; CHECK-NEXT:    csc $c3, $zero, 48($c11)
; CHECK-NEXT:    csc $c14, $zero, 32($c11)
; CHECK-NEXT:    csc $c13, $zero, 16($c11)
; CHECK-NEXT:    csetbounds $c3, $c11, 64
; CHECK-NEXT:    clcbi $c12, %capcall20(many_cap_args)($c2)
; CHECK-NEXT:    ori $1, $zero, 65495
; CHECK-NEXT:    candperm $c13, $c3, $1
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c1
; CHECK-NEXT:    clc $c17, $zero, 64($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 80
entry:
  %arg1 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 17
  %arg2 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 27
  %arg3 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 37
  %arg4 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 47
  %arg5 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 57
  %arg6 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 67
  %arg7 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %arg8 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 87
  %arg9 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 97
  %arg10 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 107
  %arg11 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 117
  %arg12 = getelementptr i8, ptr addrspace(200) %in_arg1, i64 127
  %0 = call ptr addrspace(200) @many_cap_args(ptr addrspace(200) %arg1, ptr addrspace(200) %arg2, ptr addrspace(200) %arg3, ptr addrspace(200) %arg4, ptr addrspace(200) %arg5, ptr addrspace(200) %arg6, ptr addrspace(200) %arg7, ptr addrspace(200) %arg8, ptr addrspace(200) %arg9, ptr addrspace(200) %arg10, ptr addrspace(200) %arg11, ptr addrspace(200) %arg12)
  ret void
}

define void @call_one_arg_from_many_arg(ptr addrspace(200) %in_arg1, ptr addrspace(200) %arg2, ptr addrspace(200) %arg3, ptr addrspace(200) %arg4, ptr addrspace(200) %arg5, ptr addrspace(200) %arg6, ptr addrspace(200) %arg7, ptr addrspace(200) %arg8, ptr addrspace(200) %arg9, ptr addrspace(200) %arg10, ptr addrspace(200) %arg11, ptr addrspace(200) %arg12) addrspace(200) {
; CHECK-LABEL: call_one_arg_from_many_arg:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_one_arg_from_variadic_with_va_start(ptr addrspace(200) %in_arg1, ...) addrspace(200) {
; CHECK-LABEL: call_one_arg_from_variadic_with_va_start:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    csetbounds $c2, $c11, 16
; CHECK-NEXT:    csc $c13, $zero, 0($c2)
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %ap = alloca ptr addrspace(200), align 16, addrspace(200)
  %ap1 = bitcast ptr addrspace(200) %ap to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 32, ptr addrspace(200) %ap1)
  call void @llvm.va_start.p200(ptr addrspace(200) %ap1)
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %first_arg)
  call void @llvm.va_end.p200(ptr addrspace(200) %ap1)
  call void @llvm.lifetime.end.p200(i64 32, ptr addrspace(200) %ap1)
  ret void
}

define void @call_one_arg_from_variadic_without_va_start(ptr addrspace(200) %in_arg1, ...) addrspace(200) {
; CHECK-LABEL: call_one_arg_from_variadic_without_va_start:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_variadic_no_onstack_from_varargs(ptr addrspace(200) %in_arg1, ...) addrspace(200) {
; CHECK-LABEL: call_variadic_no_onstack_from_varargs:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_variadic_no_onstack_from_many_args(ptr addrspace(200) %arg1, ptr addrspace(200) %arg2, ptr addrspace(200) %arg3, ptr addrspace(200) %arg4, ptr addrspace(200) %arg5, ptr addrspace(200) %arg6, ptr addrspace(200) %arg7, ptr addrspace(200) %arg8, ptr addrspace(200) %arg9, ptr addrspace(200) %arg10, ptr addrspace(200) %arg11, ptr addrspace(200) %arg12) addrspace(200) {
; CHECK-LABEL: call_variadic_no_onstack_from_many_args:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 89, -16
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    cgetnull $c13
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %arg1, i64 77
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg)
  ret void
}

define void @call_variadic_onstack_and_no_stack_fn_from_nostack_fn(ptr addrspace(200) %in_arg1) addrspace(200) {
; CHECK-LABEL: call_variadic_onstack_and_no_stack_fn_from_nostack_fn:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -64
; CHECK-NEXT:    .cfi_def_cfa_offset 64
; CHECK-NEXT:    csc $c19, $zero, 48($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c18, $zero, 32($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 91, -16
; CHECK-NEXT:    .cfi_offset 90, -32
; CHECK-NEXT:    .cfi_offset 89, -48
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c19, $1
; CHECK-NEXT:    cincoffset $c3, $c3, 77
; CHECK-NEXT:    cincoffset $c1, $c18, 87
; CHECK-NEXT:    csc $c1, $zero, 0($c11)
; CHECK-NEXT:    csetbounds $c1, $c11, 16
; CHECK-NEXT:    clcbi $c12, %capcall20(variadic)($c19)
; CHECK-NEXT:    ori $1, $zero, 65495
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    candperm $c13, $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(one_arg)($c19)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cincoffset $c3, $c18, 97
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 32($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c19, $zero, 48($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 64
entry:
  %first_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 77
  %second_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 87
  %0 = call ptr addrspace(200) (ptr addrspace(200), ...) @variadic(ptr addrspace(200) %first_arg, ptr addrspace(200) %second_arg)
  %third_arg = getelementptr i8, ptr addrspace(200) %in_arg1, i64 97
  %1 = call ptr addrspace(200) @one_arg(ptr addrspace(200) %third_arg)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start.p200(ptr addrspace(200)) addrspace(200) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_copy.p200.p200(ptr addrspace(200), ptr addrspace(200)) addrspace(200) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end.p200(ptr addrspace(200)) addrspace(200) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
