; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; This test caused assertion failures in MIPS DAG->DAG Pattern Instruction Selection
; REQUIRES: asserts
; RUN: %cheri128_llc -target-abi n64 %s -o - | FileCheck %s
%struct.arg_1000_long = type { [1000 x i64] }
%struct.arg_1000___intcap_t = type { [1000 x ptr addrspace(200)] }

@global_1000_long_struct = common global %struct.arg_1000_long zeroinitializer, align 8
@global_1000___intcap_t_struct = common global %struct.arg_1000___intcap_t zeroinitializer, align 16

; Function Attrs: nounwind
define void @call_1000_long_byval() local_unnamed_addr #0 {
; CHECK-LABEL: call_1000_long_byval:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $sp, $sp, -7968
; CHECK-NEXT:    sd $ra, 7960($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $17, 7952($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $16, 7944($sp) # 8-byte Folded Spill
; CHECK-NEXT:    lui $1, %highest(global_1000_long_struct)
; CHECK-NEXT:    daddiu $1, $1, %higher(global_1000_long_struct)
; CHECK-NEXT:    dsll $1, $1, 16
; CHECK-NEXT:    daddiu $1, $1, %hi(global_1000_long_struct)
; CHECK-NEXT:    dsll $16, $1, 16
; CHECK-NEXT:    daddiu $17, $16, %lo(global_1000_long_struct)
; CHECK-NEXT:    daddiu $5, $17, 64
; CHECK-NEXT:    daddiu $6, $zero, 7936
; CHECK-NEXT:    jal memcpy
; CHECK-NEXT:    move $4, $sp
; CHECK-NEXT:    ld $4, %lo(global_1000_long_struct)($16)
; CHECK-NEXT:    ld $11, 56($17)
; CHECK-NEXT:    ld $10, 48($17)
; CHECK-NEXT:    ld $9, 40($17)
; CHECK-NEXT:    ld $8, 32($17)
; CHECK-NEXT:    ld $7, 24($17)
; CHECK-NEXT:    ld $6, 16($17)
; CHECK-NEXT:    ld $5, 8($17)
; CHECK-NEXT:    jal take_1000_long_byval
; CHECK-NEXT:    nop
; CHECK-NEXT:    ld $16, 7944($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $17, 7952($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $ra, 7960($sp) # 8-byte Folded Reload
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $sp, $sp, 7968
entry:
  tail call void @take_1000_long_byval(ptr nonnull byval(%struct.arg_1000_long) align 8 @global_1000_long_struct) #0
  ret void
}

; Function Attrs: nounwind
declare void @other_func(ptr) local_unnamed_addr #0

; Function Attrs: nounwind
declare void @take_1000_long_byval(ptr byval(%struct.arg_1000_long) align 8) local_unnamed_addr #0

; Function Attrs: nounwind
define void @call_1000___intcap_t_byval() local_unnamed_addr #0 {
; CHECK-LABEL: call_1000___intcap_t_byval:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $sp, $sp, -15968
; CHECK-NEXT:    sd $ra, 15960($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $17, 15952($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $16, 15944($sp) # 8-byte Folded Spill
; CHECK-NEXT:    lui $1, %highest(global_1000___intcap_t_struct)
; CHECK-NEXT:    daddiu $1, $1, %higher(global_1000___intcap_t_struct)
; CHECK-NEXT:    dsll $1, $1, 16
; CHECK-NEXT:    daddiu $1, $1, %hi(global_1000___intcap_t_struct)
; CHECK-NEXT:    dsll $16, $1, 16
; CHECK-NEXT:    daddiu $17, $16, %lo(global_1000___intcap_t_struct)
; CHECK-NEXT:    daddiu $5, $17, 64
; CHECK-NEXT:    daddiu $6, $zero, 15936
; CHECK-NEXT:    jal memcpy
; CHECK-NEXT:    move $4, $sp
; CHECK-NEXT:    ld $4, %lo(global_1000___intcap_t_struct)($16)
; CHECK-NEXT:    ld $11, 56($17)
; CHECK-NEXT:    ld $10, 48($17)
; CHECK-NEXT:    ld $9, 40($17)
; CHECK-NEXT:    ld $8, 32($17)
; CHECK-NEXT:    ld $7, 24($17)
; CHECK-NEXT:    ld $6, 16($17)
; CHECK-NEXT:    ld $5, 8($17)
; CHECK-NEXT:    jal take_1000___intcap_t_byval
; CHECK-NEXT:    nop
; CHECK-NEXT:    ld $16, 15944($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $17, 15952($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $ra, 15960($sp) # 8-byte Folded Reload
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $sp, $sp, 15968
entry:
  tail call void @take_1000___intcap_t_byval(ptr nonnull byval(%struct.arg_1000___intcap_t) align 16 @global_1000___intcap_t_struct) #0
  ret void
}

; Function Attrs: nounwind
declare void @take_1000___intcap_t_byval(ptr byval(%struct.arg_1000___intcap_t) align 16) local_unnamed_addr #0

attributes #0 = { nounwind }
