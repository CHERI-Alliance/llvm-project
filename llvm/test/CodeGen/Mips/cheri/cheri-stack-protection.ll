; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc -cheri-cfi -relocation-model=pic %s -o - | FileCheck %s

; Function Attrs: nounwind
define i32 @bar(i32 signext %x) #0 {
; CHECK-LABEL: bar:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $sp, $sp, -48
; CHECK-NEXT:    sd $ra, 40($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $gp, 32($sp) # 8-byte Folded Spill
; CHECK-NEXT:    cgetpcc $c16
; CHECK-NEXT:    csetoffset $c16, $c16, $ra
; CHECK-NEXT:    csc $c16, $sp, 16($ddc) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(bar)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(bar)))
; CHECK-NEXT:    sw $4, 12($sp)
; CHECK-NEXT:    ld $25, %call16(foo)($gp)
; CHECK-NEXT:    .reloc .Ltmp0, R_MIPS_JALR, foo
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    jalr $25
; CHECK-NEXT:    nop
; CHECK-NEXT:    lw $1, 12($sp)
; CHECK-NEXT:    addu $2, $2, $1
; CHECK-NEXT:    clc $c16, $sp, 16($ddc) # 16-byte Folded Reload
; CHECK-NEXT:    ld $gp, 32($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $ra, 40($sp) # 8-byte Folded Reload
; CHECK-NEXT:    cjr $c16
; CHECK-NEXT:    daddiu $sp, $sp, 48
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
  %0 = load i32, ptr %x.addr, align 4
  %call = call i32 @foo(i32 signext %0)
  %1 = load i32, ptr %x.addr, align 4
  %add = add nsw i32 %call, %1
  ret i32 %add
}

declare i32 @foo(i32 signext)

; Function Attrs: nounwind
define i32 @baz(i32 signext %x) #0 {
; CHECK-LABEL: baz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $sp, $sp, -16
; CHECK-NEXT:    sw $4, 12($sp)
; CHECK-NEXT:    move $2, $4
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $sp, $sp, 16
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, ptr %x.addr, align 4
  %0 = load i32, ptr %x.addr, align 4
  ret i32 %0
}

attributes #0 = { nounwind }
