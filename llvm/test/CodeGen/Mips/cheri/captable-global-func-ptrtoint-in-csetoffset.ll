; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_purecap_llc -cheri-cap-table-abi=pcrel -o - -verify-machineinstrs %s | FileCheck %s -check-prefixes CHECK
; Check that we don't accidentally create a nonsense COPY node ($at_64 = COPY killed renamable $c1)
; when the result of the GlobalAddr goes through a ptrtoint

declare i32 @foo(ptr addrspace(200)) addrspace(200)

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200), i64) addrspace(200) #0

; Function Attrs: nounwind
define void @main(ptr addrspace(200) %arg) addrspace(200) #1 {
; CHECK-LABEL: main:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -[[#STACKFRAME_SIZE:]]
; CHECK-NEXT:    csc $c17, $zero, 0($c11)
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c1, %captab20(foo)($c1)
; CHECK-NEXT:    cgetaddr $1, $c1
; CHECK-NEXT:    csetoffset $c12, $c3, $1
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    nop
; CHECK-NEXT:    clc $c17, $zero, 0($c11)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, [[#STACKFRAME_SIZE]]
entry:
  %0 = call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) %arg, i64 ptrtoint (ptr addrspace(200) @foo to i64))
  %1 = bitcast ptr addrspace(200) %0 to ptr addrspace(200)
  %call3 = call i32 %1(ptr addrspace(200) undef)
  ret void
}

attributes #0 = { nounwind willreturn memory(none) }
attributes #1 = { nounwind }
