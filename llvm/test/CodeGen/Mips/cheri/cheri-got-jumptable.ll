; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_purecap_llc -cheri-cap-table-abi=pcrel -mxcaptable -o - %s | FileCheck %s -check-prefix PCREL

; Function Attrs: noinline nounwind
define i32 @get_next_format_from_precision(ptr addrspace(200) %pf) #0 {
; PCREL-LABEL: get_next_format_from_precision:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -96
; PCREL-NEXT:    csc $c24, $zero, 80($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 64($c11) # 16-byte Folded Spill
; PCREL-NEXT:    cincoffset $c24, $c11, $zero
; PCREL-NEXT:    cgetaddr $1, $c11
; PCREL-NEXT:    daddiu $2, $zero, -32
; PCREL-NEXT:    and $1, $1, $2
; PCREL-NEXT:    csetaddr $c11, $c11, $1
; PCREL-NEXT:    clc $c1, $zero, 0($c3)
; PCREL-NEXT:    clb $1, $zero, 0($c1)
; PCREL-NEXT:    csc $c3, $zero, 32($c11)
; PCREL-NEXT:    csc $c1, $zero, 0($c11)
; PCREL-NEXT:    addiu $1, $1, -104
; PCREL-NEXT:    sltiu $3, $1, 19
; PCREL-NEXT:    dsll $2, $1, 32
; PCREL-NEXT:    beqz $3, .LBB0_3
; PCREL-NEXT:    nop
; PCREL-NEXT:  .LBB0_1: # %entry
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    lui $1, %captab_hi(.LJTI0_0)
; PCREL-NEXT:    daddiu $1, $1, %captab_lo(.LJTI0_0)
; PCREL-NEXT:    clc $c1, $1, 0($c1)
; PCREL-NEXT:    dsrl $1, $2, 32
; PCREL-NEXT:    dsll $1, $1, 2
; PCREL-NEXT:    clw $1, $1, 0($c1)
; PCREL-NEXT:    cgetaddr $2, $c1
; PCREL-NEXT:    daddu $1, $2, $1
; PCREL-NEXT:    cgetpccsetaddr $c1, $1
; PCREL-NEXT:    csealentry $c1, $c1
; PCREL-NEXT:    cjr $c1
; PCREL-NEXT:    nop
; PCREL-NEXT:  .LBB0_2: # %sw.bb1
; PCREL-NEXT:    clc $c1, $zero, 0($c11)
; PCREL-NEXT:    cincoffset $c1, $c1, 1
; PCREL-NEXT:    csc $c1, $zero, 0($c11)
; PCREL-NEXT:  .LBB0_3: # %sw.epilog
; PCREL-NEXT:    clc $c1, $zero, 0($c11)
; PCREL-NEXT:    clc $c2, $zero, 32($c11)
; PCREL-NEXT:    csc $c1, $zero, 0($c2)
; PCREL-NEXT:    b .LBB0_5
; PCREL-NEXT:    csw $zero, $zero, 60($c11)
; PCREL-NEXT:  .LBB0_4: # %sw.bb
; PCREL-NEXT:    csw $zero, $zero, 60($c11)
; PCREL-NEXT:  .LBB0_5: # %do.end
; PCREL-NEXT:    clw $2, $zero, 60($c11)
; PCREL-NEXT:    cincoffset $c11, $c24, $zero
; PCREL-NEXT:    clc $c17, $zero, 64($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c24, $zero, 80($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    cincoffset $c11, $c11, 96
entry:
  %retval = alloca i32, align 4, addrspace(200)
  %pf.addr = alloca ptr addrspace(200), align 32, addrspace(200)
  %f = alloca ptr addrspace(200), align 32, addrspace(200)
  store ptr addrspace(200) %pf, ptr addrspace(200) %pf.addr, align 32
  %0 = load ptr addrspace(200), ptr addrspace(200) %pf.addr, align 32
  %1 = load ptr addrspace(200), ptr addrspace(200) %0, align 32
  store ptr addrspace(200) %1, ptr addrspace(200) %f, align 32
  %2 = load ptr addrspace(200), ptr addrspace(200) %f, align 32
  %3 = load i8, ptr addrspace(200) %2, align 1
  %conv = sext i8 %3 to i32
  switch i32 %conv, label %sw.epilog [
    i32 104, label %sw.bb
    i32 113, label %sw.bb1
    i32 116, label %sw.bb1
    i32 122, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  store i32 0, ptr addrspace(200) %retval, align 4
  br label %do.end

sw.bb1:                                           ; preds = %entry, %entry, %entry
  %4 = load ptr addrspace(200), ptr addrspace(200) %f, align 32
  %incdec.ptr = getelementptr inbounds i8, ptr addrspace(200) %4, i32 1
  store ptr addrspace(200) %incdec.ptr, ptr addrspace(200) %f, align 32
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb1, %entry
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %5 = load ptr addrspace(200), ptr addrspace(200) %f, align 32
  %6 = load ptr addrspace(200), ptr addrspace(200) %pf.addr, align 32
  store ptr addrspace(200) %5, ptr addrspace(200) %6, align 32
  store i32 0, ptr addrspace(200) %retval, align 4
  br label %do.end

do.end:                                           ; preds = %do.body, %sw.bb
  %7 = load i32, ptr addrspace(200) %retval, align 4
  ret i32 %7
}

attributes #0 = { noinline nounwind }
