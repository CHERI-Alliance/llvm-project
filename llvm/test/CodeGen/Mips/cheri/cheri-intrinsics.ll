; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s
; ModuleID = 'cheriintrinsic.c'
target datalayout = "E-p:64:64:64-i1:8:8-i8:8:32-i16:16:32-i32:32:32-i64:64:64-f32:32:32-f64:64:64-f128:128:128-v64:64:64-n32"
target triple = "cheri-unknown-freebsd"

; Function Attrs: nounwind
define ptr addrspace(200) @cmalloc(i64 %s) #0 {
; CHECK-LABEL: cmalloc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $sp, $sp, -16
; CHECK-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $16, 0($sp) # 8-byte Folded Spill
; CHECK-NEXT:    jal malloc
; CHECK-NEXT:    move $16, $4
; CHECK-NEXT:    cfromddc $c1, $2
; CHECK-NEXT:    csetbounds $c3, $c1, $16
; CHECK-NEXT:    ld $16, 0($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $sp, $sp, 16
entry:
  %call = tail call ptr @malloc(i64 %s) #0
  %cap = addrspacecast ptr %call to ptr addrspace(200)
  %bounded = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %cap, i64 %s)
  ret ptr addrspace(200) %bounded
}

; Function Attrs: nounwind
declare noalias ptr @malloc(i64) #0

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @addBase(ptr addrspace(200) %p) #1 {
; CHECK-LABEL: addBase:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cincoffset $c3, $c3, 1
entry:
  %incdec.ptr = getelementptr inbounds i8, ptr addrspace(200) %p, i64 1
  ret ptr addrspace(200) %incdec.ptr
}

; Function Attrs: nounwind memory(none)
define i64 @getLength(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: getLength:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cgetlen $2, $c3
entry:
  %0 = tail call i64 @llvm.cheri.cap.length.get.i64(ptr addrspace(200) %c)
  ret i64 %0
}

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.length.get.i64(ptr addrspace(200)) #2

; Function Attrs: nounwind memory(none)
define i64 @getAddress(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: getAddress:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cgetaddr $2, $c3
entry:
  %0 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %c)
  ret i64 %0
}

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200)) #2

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setAddress(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: setAddress:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $1, $zero, 1234
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetaddr $c3, $c3, $1
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) %c, i64 1234)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200), i64) #2

; Function Attrs: nounwind memory(none)
define signext i64 @getPerms(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: getPerms:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cgetperm $2, $c3
entry:
  %0 = tail call i64 @llvm.cheri.cap.perms.get.i64(ptr addrspace(200) %c)
  ret i64 %0
}

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.perms.get.i64(ptr addrspace(200)) #2

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @andPerms(ptr addrspace(200) %c, i16 signext %perms) #1 {
; CHECK-LABEL: andPerms:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andi $1, $4, 65535
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    candperm $c3, $c3, $1
entry:
  %0 = zext i16 %perms to i64
  %1 = tail call ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200) %c, i64 %0)
  ret ptr addrspace(200) %1
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200), i64) #2

; Function Attrs: nounwind memory(none)
define signext i64 @getFlags(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: getFlags:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cgetflags $2, $c3
entry:
  %0 = tail call i64 @llvm.cheri.cap.flags.get.i64(ptr addrspace(200) %c)
  ret i64 %0
}

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.flags.get.i64(ptr addrspace(200)) #2

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setFlags(ptr addrspace(200) %c, i16 signext %flags) #1 {
; CHECK-LABEL: setFlags:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    andi $1, $4, 65535
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetflags $c3, $c3, $1
entry:
  %0 = zext i16 %flags to i64
  %1 = tail call ptr addrspace(200) @llvm.cheri.cap.flags.set.i64(ptr addrspace(200) %c, i64 %0)
  ret ptr addrspace(200) %1
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.flags.set.i64(ptr addrspace(200), i64) #2

; Function Attrs: nounwind memory(none)
define i64 @gettype(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: gettype:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    cgettype $2, $c3
entry:
  %0 = tail call i64 @llvm.cheri.cap.type.get.i64(ptr addrspace(200) %c)
  ret i64 %0
}

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.type.get.i64(ptr addrspace(200)) #2

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBounds(ptr addrspace(200) %c, i64 %bounds) #1 {
; CHECK-LABEL: setBounds:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, $4
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 %bounds)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200), i64) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind memory(none) }
attributes #2 = { nounwind willreturn memory(none) }
