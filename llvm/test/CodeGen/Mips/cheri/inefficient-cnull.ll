; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_purecap_llc %s -O2 -o - | FileCheck %s
; We used to generate lots of redundant cgetnull instructions here

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200), i64) addrspace(200) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200), i64) addrspace(200) #0

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200)) addrspace(200) #0

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @return_intcap(ptr addrspace(200) %arg) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: return_intcap:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cgetaddr $1, $c3
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, $1
entry:
  %addr = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %arg)
  %result = getelementptr i8, ptr addrspace(200) null, i64 %addr
  ret ptr addrspace(200) %result
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @set_offset(ptr addrspace(200) %arg, i64 %offset) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: set_offset:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, $4
entry:
  %result = tail call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) null, i64 %offset)
  ret ptr addrspace(200) %result
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @set_offset_imm(ptr addrspace(200) %arg) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: set_offset_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, 123
entry:
  %result = tail call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) null, i64 123)
  ret ptr addrspace(200) %result
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @inc_offset(ptr addrspace(200) %arg, i64 %offset) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: inc_offset:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, $4
entry:
  %result = getelementptr i8, ptr addrspace(200) null, i64 %offset
  ret ptr addrspace(200) %result
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @inc_offset_imm(ptr addrspace(200) %arg) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: inc_offset_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, 123
entry:
  ret ptr addrspace(200) getelementptr (i8, ptr addrspace(200) null, i64 123)
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @set_addr(ptr addrspace(200) %arg, i64 %offset) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: set_addr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csetaddr $c3, $cnull, $4
entry:
  %result = tail call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) null, i64 %offset)
  ret ptr addrspace(200) %result
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @set_addr_imm(ptr addrspace(200) %arg) local_unnamed_addr addrspace(200) #1 {
; CHECK-LABEL: set_addr_imm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c3, $cnull, 123
entry:
  %result = tail call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) null, i64 123)
  ret ptr addrspace(200) %result
}

attributes #0 = { nounwind willreturn memory(none) }
attributes #1 = { nounwind memory(none) }
