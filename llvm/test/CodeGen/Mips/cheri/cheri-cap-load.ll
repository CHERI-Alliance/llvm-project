; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s

; ModuleID = 'load.c'
target datalayout = "E-p:64:64:64-i1:8:8-i8:8:32-i16:16:32-i32:32:32-i64:64:64-f32:32:32-f64:64:64-f128:128:128-v64:64:64-n32"
target triple = "cheri-unknown-freebsd"

; Function Attrs: nounwind memory(read)
define zeroext i8 @loadFromPtr1U(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr1U:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clb $1, $zero, 0($c3)
; CHECK-NEXT:    addiu $1, $1, 12
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    andi $2, $1, 255
entry:
  %0 = load i8, ptr addrspace(200) %a, align 1
  %conv = zext i8 %0 to i32
  %add = add nsw i32 %conv, 12
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: nounwind memory(read)
define signext i8 @loadFromPtr1(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clb $1, $zero, 0($c3)
; CHECK-NEXT:    sll $1, $1, 24
; CHECK-NEXT:    lui $2, 3072
; CHECK-NEXT:    addu $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sra $2, $1, 24
entry:
  %0 = load i8, ptr addrspace(200) %a, align 1
  %conv2 = zext i8 %0 to i32
  %add = add nsw i32 %conv2, 12
  %conv1 = trunc i32 %add to i8
  ret i8 %conv1
}

; Function Attrs: nounwind memory(read)
define zeroext i16 @loadFromPtr2U(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr2U:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clh $1, $zero, 0($c3)
; CHECK-NEXT:    addiu $1, $1, 12
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    andi $2, $1, 65535
entry:
  %0 = load i16, ptr addrspace(200) %a, align 2
  %conv = zext i16 %0 to i32
  %add = add nsw i32 %conv, 12
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: nounwind memory(read)
define signext i16 @loadFromPtr2(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clh $1, $zero, 0($c3)
; CHECK-NEXT:    sll $1, $1, 16
; CHECK-NEXT:    lui $2, 12
; CHECK-NEXT:    addu $1, $1, $2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    sra $2, $1, 16
entry:
  %0 = load i16, ptr addrspace(200) %a, align 2
  %conv2 = zext i16 %0 to i32
  %add = add nsw i32 %conv2, 12
  %conv1 = trunc i32 %add to i16
  ret i16 %conv1
}

; Function Attrs: nounwind memory(read)
define i32 @loadFromPtr4U(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr4U:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clw $1, $zero, 0($c3)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    addiu $2, $1, 12
entry:
  %0 = load i32, ptr addrspace(200) %a, align 4
  %add = add i32 %0, 12
  ret i32 %add
}

; Function Attrs: nounwind memory(read)
define i32 @loadFromPtr4(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clw $1, $zero, 0($c3)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    addiu $2, $1, 12
entry:
  %0 = load i32, ptr addrspace(200) %a, align 4
  %add = add nsw i32 %0, 12
  ret i32 %add
}

; Function Attrs: nounwind memory(read)
define i64 @loadFromPtr8U(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr8U:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cld $1, $zero, 0($c3)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $2, $1, 12
entry:
  %0 = load i64, ptr addrspace(200) %a, align 8
  %add = add i64 %0, 12
  ret i64 %add
}

; Function Attrs: nounwind memory(read)
define i64 @loadFromPtr8(ptr addrspace(200) nocapture %a) #0 {
; CHECK-LABEL: loadFromPtr8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cld $1, $zero, 0($c3)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $2, $1, 12
entry:
  %0 = load i64, ptr addrspace(200) %a, align 8
  %add = add nsw i64 %0, 12
  ret i64 %add
}

attributes #0 = { nounwind memory(read) }
