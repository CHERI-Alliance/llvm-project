; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Disable the delay slot filler to avoid testing the reordering
; RUNs: %cheri_purecap_llc -cheri-cap-table-abi=plt %s -O2 -o - -disable-mips-delay-filler
; RUN: %cheri_purecap_llc -cheri-cap-table-abi=plt %s -O2 -o - -disable-mips-delay-filler | %cheri_FileCheck %s -check-prefixes PLT,CHECK
; RUN: %cheri_purecap_llc -cheri-cap-table-abi=pcrel %s -O2 -o - -disable-mips-delay-filler | %cheri_FileCheck %s -check-prefixes PCREL,CHECK


; Check that $cgp is restored prior to calling other functions in the same TU
; after an external call (since that clobbers $cgp)

@fn_ptr = internal unnamed_addr addrspace(200) global ptr addrspace(200) @external_func, align 32
@global_int = internal addrspace(200) global i64 4, align 4
@global = local_unnamed_addr addrspace(200) global i8 123, align 8

declare i32 @external_func() addrspace(200)

declare i32 @external_func2() addrspace(200)

declare dso_local i32 @external_local_func() addrspace(200)

; Function Attrs: noinline nounwind
define internal i64 @local_func_no_calls_but_uses_globals(i64 %arg) addrspace(200) #0 {
; PLT-LABEL: local_func_no_calls_but_uses_globals:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    clcbi $c1, %captab20(global_int)($c26)
; PLT-NEXT:    cld $1, $zero, 0($c1)
; PLT-NEXT:    daddu $2, $4, $1
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: local_func_no_calls_but_uses_globals:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    clcbi $c1, %captab20(global_int)($c1)
; PCREL-NEXT:    cld $1, $zero, 0($c1)
; PCREL-NEXT:    daddu $2, $4, $1
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %global_val = load i64, ptr addrspace(200) @global_int, align 8
  %result = add i64 %arg, %global_val
  ret i64 %result
}

; Function Attrs: noinline nounwind
define internal i32 @local_func() addrspace(200) #0 {
; PLT-LABEL: local_func:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    addiu $2, $zero, 1
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: local_func:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    addiu $2, $zero, 1
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  ret i32 1
}

; Function Attrs: noinline nounwind
define internal i32 @local_func_calls_external() addrspace(200) #0 {
; PLT-LABEL: local_func_calls_external:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -32
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 32
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: local_func_calls_external:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -16
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func)($c1)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 16
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %call = call i32 @external_func()
  ret i32 %call
}

; Function Attrs: noinline nounwind
define internal i32 @call_only_local() addrspace(200) #0 {
; PLT-LABEL: call_only_local:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -16
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    clcbi $c12, %capcall20(local_func_calls_external)($c26)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 16
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_only_local:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -16
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(local_func_calls_external)($c1)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 16
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %result = call i32 @local_func_calls_external()
  ret i32 %result
}

; Function Attrs: nounwind
define i32 @call_two_external_funcs() addrspace(200) #1 {
; PLT-LABEL: call_two_external_funcs:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -48
; PLT-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    move $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clcbi $c12, %capcall20(external_func2)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $2, $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 48
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_two_external_funcs:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -48
; PCREL-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    move $16, $2
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func2)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $2, $16, $2
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 48
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %call = call i32 @external_func()
  %call2 = call i32 @external_func2()
  %result = add i32 %call, %call2
  ret i32 %result
}

; Function Attrs: nounwind
define i32 @call_global_then_local() addrspace(200) #1 {
; PLT-LABEL: call_global_then_local:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -48
; PLT-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    move $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clcbi $c12, %capcall20(local_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $16, $16, $2
; PLT-NEXT:    clcbi $c12, %capcall20(external_local_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $2, $16, $2
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 48
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_global_then_local:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -48
; PCREL-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    move $16, $2
; PCREL-NEXT:    clcbi $c12, %capcall20(local_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $16, $16, $2
; PCREL-NEXT:    clcbi $c12, %capcall20(external_local_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $2, $16, $2
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 48
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %call = call i32 @external_func()
  %call2 = call i32 @local_func()
  %result = add i32 %call, %call2
  %call3 = call i32 @external_local_func()
  %result2 = add i32 %result, %call3
  ret i32 %result2
}

; Function Attrs: nounwind
define i32 @call_local_then_global() addrspace(200) #1 {
; PLT-LABEL: call_local_then_global:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -48
; PLT-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(local_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    move $16, $2
; PLT-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $2, $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 48
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_local_then_global:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -48
; PCREL-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(local_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    move $16, $2
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $2, $16, $2
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 48
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %call = call i32 @local_func()
  %call2 = call i32 @external_func()
  %result = add i32 %call, %call2
  ret i32 %result
}

; Function Attrs: nounwind
define i32 @call_fn_ptr() addrspace(200) #1 {
; PLT-LABEL: call_fn_ptr:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -48
; PLT-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    clcbi $c1, %captab20(fn_ptr)($c18)
; PLT-NEXT:    clc $c12, $zero, 0($c1)
; PLT-NEXT:    move $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $2, $16, $2
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 48
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_fn_ptr:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -48
; PCREL-NEXT:    csd $16, $zero, 40($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_func)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clcbi $c1, %captab20(fn_ptr)($c18)
; PCREL-NEXT:    clc $c12, $zero, 0($c1)
; PCREL-NEXT:    move $16, $2
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $2, $16, $2
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cld $16, $zero, 40($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 48
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %call = call i32 @external_func()
  %fn = load ptr addrspace(200), ptr addrspace(200) @fn_ptr, align 32
  %call2 = call i32 %fn()
  %result = add i32 %call, %call2
  ret i32 %result
}

declare void @external_call1() addrspace(200)

declare void @external_call2() addrspace(200)

declare i32 @external_i32() addrspace(200)

; Function Attrs: nounwind
define ptr addrspace(200) @access_global_after_external_call() addrspace(200) #1 {
; PLT-LABEL: access_global_after_external_call:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -32
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    clcbi $c3, %captab20(global)($c18)
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 32
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: access_global_after_external_call:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -32
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clcbi $c3, %captab20(global)($c18)
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 32
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  call void @external_call1()
  ret ptr addrspace(200) @global
}

; Function Attrs: nounwind
define void @call_two_functions() addrspace(200) #1 {
; PLT-LABEL: call_two_functions:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -32
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clcbi $c12, %capcall20(external_call2)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 32
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: call_two_functions:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -32
; PCREL-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c18, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clcbi $c12, %capcall20(external_call2)($c18)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 32
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  call void @external_call1()
  call void @external_call2()
  ret void
}

; Function Attrs: nounwind
define i32 @not_needed_after_call(i32 %arg1, i32 %arg2) addrspace(200) #1 {
; PLT-LABEL: not_needed_after_call:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -48
; PLT-NEXT:    csd $17, $zero, 40($c11) # 8-byte Folded Spill
; PLT-NEXT:    csd $16, $zero, 32($c11) # 8-byte Folded Spill
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    sll $16, $5, 0
; PLT-NEXT:    sll $17, $4, 0
; PLT-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    addu $2, $17, $16
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cld $16, $zero, 32($c11) # 8-byte Folded Reload
; PLT-NEXT:    cld $17, $zero, 40($c11) # 8-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 48
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: not_needed_after_call:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -32
; PCREL-NEXT:    csd $17, $zero, 24($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csd $16, $zero, 16($c11) # 8-byte Folded Spill
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    sll $16, $5, 0
; PCREL-NEXT:    sll $17, $4, 0
; PCREL-NEXT:    clcbi $c12, %capcall20(external_call1)($c1)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    addu $2, $17, $16
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cld $16, $zero, 16($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cld $17, $zero, 24($c11) # 8-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 32
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  call void @external_call1()
  %ret = add i32 %arg1, %arg2
  ret i32 %ret
}

; Function Attrs: nounwind
define void @tailcall_external(i32 %arg1, i32 %arg2) addrspace(200) #1 {
; PLT-LABEL: tailcall_external:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -32
; PLT-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    cmove $c18, $c26
; PLT-NEXT:    clcbi $c12, %capcall20(external_call1)($c18)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    cmove $c26, $c18
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 32
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: tailcall_external:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -16
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(external_call1)($c1)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 16
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  tail call void @external_call1()
  ret void
}

; Function Attrs: nounwind
define internal i32 @tailcall_local(i32 %arg1, i32 %arg2) addrspace(200) #1 {
; PLT-LABEL: tailcall_local:
; PLT:       # %bb.0: # %entry
; PLT-NEXT:    cincoffset $c11, $c11, -16
; PLT-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PLT-NEXT:    clcbi $c12, %capcall20(local_func)($c26)
; PLT-NEXT:    cjalr $c12, $c17
; PLT-NEXT:    nop
; PLT-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PLT-NEXT:    cincoffset $c11, $c11, 16
; PLT-NEXT:    cjr $c17
; PLT-NEXT:    nop
;
; PCREL-LABEL: tailcall_local:
; PCREL:       # %bb.0: # %entry
; PCREL-NEXT:    cincoffset $c11, $c11, -16
; PCREL-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PCREL-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PCREL-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PCREL-NEXT:    cgetpccincoffset $c1, $1
; PCREL-NEXT:    clcbi $c12, %capcall20(local_func)($c1)
; PCREL-NEXT:    cjalr $c12, $c17
; PCREL-NEXT:    nop
; PCREL-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PCREL-NEXT:    cincoffset $c11, $c11, 16
; PCREL-NEXT:    cjr $c17
; PCREL-NEXT:    nop
entry:
  %ret = tail call i32 @local_func()
  ret i32 %ret
}

attributes #0 = { noinline nounwind }
attributes #1 = { nounwind }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
