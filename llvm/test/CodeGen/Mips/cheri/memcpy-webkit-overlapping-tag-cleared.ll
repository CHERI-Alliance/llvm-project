; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri128_purecap_llc %s -o - -O2 | FileCheck %s '-D#CAP_SIZE=16'
; Regression test for a crash in Webkit where the tag bit for hash map keys was cleared due to
; inlined memcpy performing an unaligned csd that cleared the tag bit of the key member

; Function Attrs: nounwind
declare ptr addrspace(200) @find_in_table(i32 signext) local_unnamed_addr addrspace(200) #0

; Function Attrs: nounwind
define i1 @insert_padded_test(ptr addrspace(200) nocapture readonly %key, i32 signext %index) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: insert_padded_test:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(find_in_table)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:    clc $c1, $zero, 0($c18)
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
; CHECK-NEXT:    clc $c1, $zero, 16($c18)
; CHECK-NEXT:    addiu $2, $zero, 1
; CHECK-NEXT:    csc $c1, $zero, 16($c3)
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %call = tail call ptr addrspace(200) @find_in_table(i32 signext %index) #0
  %0 = bitcast ptr addrspace(200) %call to ptr addrspace(200)
  %1 = bitcast ptr addrspace(200) %key to ptr addrspace(200)
  tail call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) align 16 %0, ptr addrspace(200) nonnull align 16 %1, i64 32, i1 false)
  ret i1 true
}

; Function Attrs: nounwind
define i1 @insert_padded_but_copy_only_relevant_bytes(ptr addrspace(200) nocapture readonly %key, i32 signext %index) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: insert_padded_but_copy_only_relevant_bytes:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(find_in_table)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:    clc $c1, $zero, 0($c18)
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
; CHECK-NEXT:    clc $c1, $zero, 16($c18)
; CHECK-NEXT:    addiu $2, $zero, 1
; CHECK-NEXT:    csc $c1, $zero, 16($c3)
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %call = tail call ptr addrspace(200) @find_in_table(i32 signext %index) #0
  %0 = bitcast ptr addrspace(200) %call to ptr addrspace(200)
  %1 = bitcast ptr addrspace(200) %key to ptr addrspace(200)
  tail call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) align 16 %0, ptr addrspace(200) nonnull align 16 %1, i64 32, i1 false)
  ret i1 true
}

; Function Attrs: nounwind
declare ptr addrspace(200) @find_in_table_unpadded(i32 signext) local_unnamed_addr addrspace(200) #0

; Function Attrs: nounwind
define i1 @insert_no_padding(ptr addrspace(200) nocapture readonly %key, i32 signext %index) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: insert_no_padding:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(find_in_table_unpadded)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:    clc $c1, $zero, 0($c18)
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
; CHECK-NEXT:    clw $1, $zero, 16($c18)
; CHECK-NEXT:    csw $1, $zero, 16($c3)
; CHECK-NEXT:    clh $1, $zero, 20($c18)
; CHECK-NEXT:    addiu $2, $zero, 1
; CHECK-NEXT:    csh $1, $zero, 20($c3)
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %call = tail call ptr addrspace(200) @find_in_table_unpadded(i32 signext %index) #0
  %0 = bitcast ptr addrspace(200) %call to ptr addrspace(200)
  %1 = bitcast ptr addrspace(200) %key to ptr addrspace(200)
  tail call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) align 16 %0, ptr addrspace(200) nonnull align 16 %1, i64 22, i1 false)
  ret i1 true
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noalias nocapture writeonly, ptr addrspace(200) noalias nocapture readonly, i64, i1 immarg) addrspace(200) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #1

attributes #0 = { nounwind }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
