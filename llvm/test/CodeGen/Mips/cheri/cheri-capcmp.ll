; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s --check-prefix=CHECK-INEXACT
; RUN: %cheri_llc -mattr=+cheri-exact-equals %s -o - | FileCheck %s --check-prefix=CHECK-EXACT
; RUN: %cheri_llc -mattr=-cheri-exact-equals %s -o - | FileCheck %s --check-prefix=CHECK-INEXACT

; Function Attrs: nounwind
define i32 @eq(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: eq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    ceq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: eq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cexeq $2, $c3, $c4
  %cmp = icmp eq ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @ne(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: ne:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cne $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ne:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cnexeq $2, $c3, $c4
  %cmp = icmp ne ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @lt(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: lt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    clt $2, $c3, $c4
;
; CHECK-EXACT-LABEL: lt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    clt $2, $c3, $c4
  %cmp = icmp slt ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @ult(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: ult:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cltu $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ult:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cltu $2, $c3, $c4
  %cmp = icmp ult ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @le(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: le:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cle $2, $c3, $c4
;
; CHECK-EXACT-LABEL: le:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cle $2, $c3, $c4
  %cmp = icmp sle ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @ule(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: ule:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cleu $2, $c3, $c4
;
; CHECK-EXACT-LABEL: ule:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cleu $2, $c3, $c4
  %cmp = icmp ule ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @gt(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: gt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    clt $2, $c4, $c3
;
; CHECK-EXACT-LABEL: gt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    clt $2, $c4, $c3
  %cmp = icmp sgt ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @ugt(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: ugt:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cltu $2, $c4, $c3
;
; CHECK-EXACT-LABEL: ugt:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cltu $2, $c4, $c3
  %cmp = icmp ugt ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @ge(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: ge:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cle $2, $c4, $c3
;
; CHECK-EXACT-LABEL: ge:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cle $2, $c4, $c3
  %cmp = icmp sge ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @uge(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: uge:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cleu $2, $c4, $c3
;
; CHECK-EXACT-LABEL: uge:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cleu $2, $c4, $c3
  %cmp = icmp uge ptr addrspace(200) %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind willreturn memory(none)
declare i1 @llvm.cheri.cap.equal.exact(ptr addrspace(200), ptr addrspace(200)) #1

; Function Attrs: nounwind
define i32 @exeq(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: exeq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cexeq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: exeq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cexeq $2, $c3, $c4
  %cmp = call i1 @llvm.cheri.cap.equal.exact(ptr addrspace(200) %a, ptr addrspace(200) %b)
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define i32 @nexeq(ptr addrspace(200) %a, ptr addrspace(200) readnone %b) #0 {
; CHECK-INEXACT-LABEL: nexeq:
; CHECK-INEXACT:       # %bb.0:
; CHECK-INEXACT-NEXT:    jr $ra
; CHECK-INEXACT-NEXT:    cnexeq $2, $c3, $c4
;
; CHECK-EXACT-LABEL: nexeq:
; CHECK-EXACT:       # %bb.0:
; CHECK-EXACT-NEXT:    jr $ra
; CHECK-EXACT-NEXT:    cnexeq $2, $c3, $c4
  %cmp = call i1 @llvm.cheri.cap.equal.exact(ptr addrspace(200) %a, ptr addrspace(200) %b)
  %not = xor i1 %cmp, true
  %conv = zext i1 %not to i32
  ret i32 %conv
}

attributes #0 = { nounwind }
attributes #1 = { nounwind willreturn memory(none) }
