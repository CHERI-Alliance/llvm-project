; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri128_purecap_llc -frame-pointer=all %s -O2 -o - | FileCheck %s '-D#CAP_SIZE=16'
; RUNNOT: %cheri128_purecap_llc %s -O2 -o - -filetype=obj | llvm-objdump -d - -no-show-raw-insn -no-leading-addr
; RUNNOT: %cheri128_purecap_llc %s -O2 -o - -filetype=obj | llvm-objdump -d - -no-show-raw-insn | FileCheck %s -check-prefix DUMP
; RUN: %cheri128_purecap_llc -frame-pointer=all %s -O2 -o - -filetype=obj | llvm-objdump -t - | FileCheck %s -check-prefix SYMBOLS
; Check the size of the generated function:
; SYMBOLS: 0000000000000000 g F .text 00000000000002a4 .hidden _ZN7WebCore67jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabledEPN3JSC9ExecStateE

source_filename = "DerivedSources/WebCore/JSInternalSettingsGenerated.cpp"

%"struct.JSC::MethodTable" = type { ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200) }
%"class.JSC::JSValue" = type { %"union.JSC::EncodedValueDescriptor" }
%"union.JSC::EncodedValueDescriptor" = type { ptr addrspace(200) }
%"class.JSC::ExecState" = type { %"class.JSC::Register" }
%"class.JSC::Register" = type { %union.anon }
%union.anon = type { ptr addrspace(200) }
%"class.JSC::VM" = type { %"class.WTF::ThreadSafeRefCounted.23", %"class.WTF::RefPtr.24", %"class.JSC::Heap", i32, ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong", %"class.JSC::Strong.187", %"class.JSC::Strong.187", ptr addrspace(200), %"class.WTF::SymbolRegistry", ptr addrspace(200), ptr addrspace(200), %"class.JSC::SmallStrings", %"class.JSC::NumericStrings", %"class.JSC::DateInstanceCache", %"class.WTF::SimpleStats", %"class.JSC::WeakGCMap", %"class.JSC::WeakGCMap.216", %"class.JSC::Strong.220", %"class.JSC::PrototypeMap", %"class.WTF::HashMap.231", ptr addrspace(200), %"class.std::__1::unique_ptr.243", ptr addrspace(200), ptr addrspace(200), %"class.JSC::JSValue", i32, ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), i32, ptr addrspace(200), %"class.WTF::Vector.249", i64, i8, ptr addrspace(200), ptr addrspace(200), %"class.WTF::HashSet.256", %"struct.JSC::LocalTimeOffsetCache", %"class.WTF::String", double, %"class.std::__1::unique_ptr.258", %"class.WTF::RefPtr.264", ptr addrspace(200), %"class.WTF::BumpPointerAllocator", ptr addrspace(200), i64, %struct.anon.266, ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), i8, i8, i8, i8, %"class.std::__1::unique_ptr.267", ptr addrspace(200), %"class.std::__1::unique_ptr.273", %"class.WTF::HashMap.279", %"class.std::__1::unique_ptr.282", %"class.std::__1::unique_ptr.288", i32, [12 x i8], %"class.JSC::FunctionHasExecutedCache", %"class.std::__1::unique_ptr.311", i32, [12 x i8], %"class.WTF::Deque", %"class.WTF::MallocPtr", %"class.WTF::RefPtr.331", %"class.std::__1::unique_ptr.332" }
%"class.WTF::ThreadSafeRefCounted.23" = type { %"class.WTF::ThreadSafeRefCountedBase" }
%"class.WTF::ThreadSafeRefCountedBase" = type { %"struct.std::__1::atomic.17" }
%"struct.std::__1::atomic.17" = type { %"struct.std::__1::__atomic_base.18" }
%"struct.std::__1::__atomic_base.18" = type { %"struct.std::__1::__atomic_base.19" }
%"struct.std::__1::__atomic_base.19" = type { i32 }
%"class.WTF::RefPtr.24" = type { ptr addrspace(200) }
%"class.JSC::Heap" = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i64, i64, i64, i64, i32, %"class.JSC::StructureIDTable", %"class.JSC::MarkedSpace", %"class.JSC::CopiedSpace", %"class.JSC::GCIncomingRefCountedSet", i64, i64, %"class.WTF::HashSet.85", %"class.WTF::HashCountedSet", %"class.std::__1::unique_ptr.88", %"class.JSC::MachineThreads", %"class.JSC::SlotVisitor", %"class.WTF::Vector.98", %"class.WTF::Vector.105", %"class.WTF::Lock", %"class.JSC::HandleSet", %"class.JSC::HandleStack", %"class.JSC::CodeBlockSet", %"class.JSC::JITStubRoutineSet", %"class.JSC::Heap::FinalizerOwner", i8, %"class.JSC::WriteBarrierBuffer", ptr addrspace(200), double, double, %"class.WTF::Vector.123", %"class.WTF::Vector.129", i64, %"class.WTF::RefPtr.135", %"class.WTF::RefPtr.136", %"class.std::__1::unique_ptr.137", %"class.WTF::Vector.70", %"class.WTF::Vector.143", i32, [12 x i8], %"class.WTF::Vector.149", %"class.std::__1::unique_ptr.155", %"class.WTF::HashMap.161", %"class.WTF::Lock", %"class.WTF::Condition", %"class.JSC::MarkStackArray", i32, i32, i8, %"class.WTF::Lock", %"class.WTF::HashSet", %"class.WTF::Vector.165", %"class.JSC::ListableHandler<JSC::WeakReferenceHarvester>::List", %"class.JSC::ListableHandler<JSC::UnconditionalFinalizer>::List", %"class.WTF::ParallelHelperClient" }
%"class.JSC::StructureIDTable" = type { %"class.WTF::Vector.26", i32, %"class.std::__1::unique_ptr.29", i64, i64 }
%"class.WTF::Vector.26" = type { %"class.WTF::VectorBuffer.base", [8 x i8] }
%"class.WTF::VectorBuffer.base" = type { %"class.WTF::VectorBufferBase.base.51" }
%"class.WTF::VectorBufferBase.base.51" = type <{ ptr addrspace(200), i32, i32 }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { ptr addrspace(200) }
%"class.JSC::MarkedSpace" = type { %"struct.JSC::MarkedSpace::Subspace", %"struct.JSC::MarkedSpace::Subspace", ptr addrspace(200), i64, i8, %"class.JSC::MarkedBlockSet", %"class.WTF::Vector.70" }
%"struct.JSC::MarkedSpace::Subspace" = type { %"struct.std::__1::array", %"struct.std::__1::array.67", %"class.JSC::MarkedAllocator" }
%"struct.std::__1::array" = type { [48 x %"class.JSC::MarkedAllocator"] }
%"struct.std::__1::array.67" = type { [32 x %"class.JSC::MarkedAllocator"] }
%"class.JSC::MarkedAllocator" = type { %"struct.JSC::MarkedBlock::FreeList", ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), %"class.WTF::DoublyLinkedList.66", %"class.WTF::DoublyLinkedList.66", i64, i8, ptr addrspace(200), ptr addrspace(200) }
%"struct.JSC::MarkedBlock::FreeList" = type <{ ptr addrspace(200), i64, [8 x i8] }>
%"class.WTF::DoublyLinkedList.66" = type { ptr addrspace(200), ptr addrspace(200) }
%"class.JSC::MarkedBlockSet" = type { %"class.JSC::TinyBloomFilter", %"class.WTF::HashSet.68" }
%"class.JSC::TinyBloomFilter" = type { i64 }
%"class.WTF::HashSet.68" = type { %"class.WTF::HashTable.69" }
%"class.WTF::HashTable.69" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::CopiedSpace" = type <{ ptr addrspace(200), %"class.JSC::CopiedAllocator", %"class.WTF::HashSet.76", %"class.WTF::Lock", [15 x i8], %"struct.JSC::CopiedSpace::CopiedGeneration", %"struct.JSC::CopiedSpace::CopiedGeneration", i8, i8, %"class.WTF::Lock", [5 x i8], i64, i64, [8 x i8] }>
%"class.JSC::CopiedAllocator" = type { i64, ptr addrspace(200), ptr addrspace(200) }
%"class.WTF::HashSet.76" = type { %"class.WTF::HashTable.77" }
%"class.WTF::HashTable.77" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"struct.JSC::CopiedSpace::CopiedGeneration" = type <{ ptr addrspace(200), ptr addrspace(200), %"class.WTF::DoublyLinkedList.78", %"class.WTF::DoublyLinkedList.78", %"class.WTF::DoublyLinkedList.78", %"class.JSC::TinyBloomFilter", [8 x i8] }>
%"class.WTF::DoublyLinkedList.78" = type { ptr addrspace(200), ptr addrspace(200) }
%"class.JSC::GCIncomingRefCountedSet" = type { %"class.WTF::Vector.79", i64, [8 x i8] }
%"class.WTF::Vector.79" = type { %"class.WTF::VectorBuffer.base.83", [8 x i8] }
%"class.WTF::VectorBuffer.base.83" = type { %"class.WTF::VectorBufferBase.base.82" }
%"class.WTF::VectorBufferBase.base.82" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::HashSet.85" = type { %"class.WTF::HashTable.86" }
%"class.WTF::HashTable.86" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.WTF::HashCountedSet" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.87" }
%"class.WTF::HashTable.87" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { ptr addrspace(200) }
%"class.JSC::MachineThreads" = type <{ %"class.WTF::Lock", [15 x i8], ptr addrspace(200), i32, i32, [8 x i8] }>
%"class.JSC::SlotVisitor" = type <{ %"class.JSC::MarkStackArray", %"class.JSC::OpaqueRootSet", i64, i64, i64, i8, [7 x i8], ptr addrspace(200), i8, [15 x i8] }>
%"class.JSC::OpaqueRootSet" = type <{ %"class.WTF::HashSet", ptr addrspace(200), i8, [15 x i8] }>
%"class.WTF::Vector.98" = type { %"class.WTF::VectorBuffer.base.103", [8 x i8] }
%"class.WTF::VectorBuffer.base.103" = type { %"class.WTF::VectorBufferBase.base.102" }
%"class.WTF::VectorBufferBase.base.102" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::Vector.105" = type { %"class.WTF::VectorBuffer.base.109", [8 x i8] }
%"class.WTF::VectorBuffer.base.109" = type { %"class.WTF::VectorBufferBase.base.108" }
%"class.WTF::VectorBufferBase.base.108" = type <{ ptr addrspace(200), i32, i32 }>
%"class.JSC::HandleSet" = type { ptr addrspace(200), %"class.WTF::DoublyLinkedList.111", %"class.WTF::SentinelLinkedList.114", %"class.WTF::SentinelLinkedList.114", %"class.WTF::SinglyLinkedList" }
%"class.WTF::DoublyLinkedList.111" = type { ptr addrspace(200), ptr addrspace(200) }
%"class.WTF::SentinelLinkedList.114" = type { %"class.JSC::HandleNode", %"class.JSC::HandleNode" }
%"class.JSC::HandleNode" = type { %"class.JSC::JSValue", ptr addrspace(200), ptr addrspace(200) }
%"class.WTF::SinglyLinkedList" = type { ptr addrspace(200) }
%"class.JSC::HandleStack" = type { %"class.WTF::BlockStack", %"class.JSC::HandleStack::Frame" }
%"class.WTF::BlockStack" = type { %"class.WTF::Vector.115", ptr addrspace(200) }
%"class.WTF::Vector.115" = type { %"class.WTF::VectorBuffer.base.119", [8 x i8] }
%"class.WTF::VectorBuffer.base.119" = type { %"class.WTF::VectorBufferBase.base.118" }
%"class.WTF::VectorBufferBase.base.118" = type <{ ptr addrspace(200), i32, i32 }>
%"class.JSC::HandleStack::Frame" = type { ptr addrspace(200), ptr addrspace(200) }
%"class.JSC::CodeBlockSet" = type <{ %"class.WTF::HashSet.121", %"class.WTF::HashSet.121", %"class.WTF::HashSet.121", %"class.WTF::Lock", [15 x i8] }>
%"class.WTF::HashSet.121" = type { %"class.WTF::HashTable.122" }
%"class.WTF::HashTable.122" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::JITStubRoutineSet" = type { i8 }
%"class.JSC::Heap::FinalizerOwner" = type { %"class.JSC::WeakHandleOwner" }
%"class.JSC::WeakHandleOwner" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrierBuffer" = type { i32, i32, ptr addrspace(200) }
%"class.WTF::Vector.123" = type { %"class.WTF::VectorBuffer.base.127", [8 x i8] }
%"class.WTF::VectorBuffer.base.127" = type { %"class.WTF::VectorBufferBase.base.126" }
%"class.WTF::VectorBufferBase.base.126" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::Vector.129" = type { %"class.WTF::VectorBuffer.base.133", [8 x i8] }
%"class.WTF::VectorBuffer.base.133" = type { %"class.WTF::VectorBufferBase.base.132" }
%"class.WTF::VectorBufferBase.base.132" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::RefPtr.135" = type { ptr addrspace(200) }
%"class.WTF::RefPtr.136" = type { ptr addrspace(200) }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { ptr addrspace(200) }
%"class.WTF::Vector.70" = type { %"class.WTF::VectorBuffer.base.74", [8 x i8] }
%"class.WTF::VectorBuffer.base.74" = type { %"class.WTF::VectorBufferBase.base.73" }
%"class.WTF::VectorBufferBase.base.73" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::Vector.143" = type { %"class.WTF::VectorBuffer.base.147", [8 x i8] }
%"class.WTF::VectorBuffer.base.147" = type { %"class.WTF::VectorBufferBase.base.146" }
%"class.WTF::VectorBufferBase.base.146" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::Vector.149" = type { %"class.WTF::VectorBuffer.base.153", [8 x i8] }
%"class.WTF::VectorBuffer.base.153" = type { %"class.WTF::VectorBufferBase.base.152" }
%"class.WTF::VectorBufferBase.base.152" = type <{ ptr addrspace(200), i32, i32 }>
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { ptr addrspace(200) }
%"class.WTF::HashMap.161" = type { %"class.WTF::HashTable.162" }
%"class.WTF::HashTable.162" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.WTF::Condition" = type { %"struct.WTF::ConditionBase" }
%"struct.WTF::ConditionBase" = type { %"struct.WTF::Atomic.164" }
%"struct.WTF::Atomic.164" = type { %"struct.std::__1::atomic.96" }
%"struct.std::__1::atomic.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { i8 }
%"class.JSC::MarkStackArray" = type { %"class.JSC::GCSegmentedArray" }
%"class.JSC::GCSegmentedArray" = type { %"class.WTF::DoublyLinkedList", i64, i64 }
%"class.WTF::DoublyLinkedList" = type { ptr addrspace(200), ptr addrspace(200) }
%"class.WTF::Lock" = type { %"struct.WTF::LockBase" }
%"struct.WTF::LockBase" = type { %"struct.WTF::Atomic" }
%"struct.WTF::Atomic" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { i8 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.WTF::Vector.165" = type { %"class.WTF::VectorBuffer.base.169", [8 x i8] }
%"class.WTF::VectorBuffer.base.169" = type { %"class.WTF::VectorBufferBase.base.168" }
%"class.WTF::VectorBufferBase.base.168" = type <{ ptr addrspace(200), i32, i32 }>
%"class.JSC::ListableHandler<JSC::WeakReferenceHarvester>::List" = type { %"class.WTF::Lock", ptr addrspace(200) }
%"class.JSC::ListableHandler<JSC::UnconditionalFinalizer>::List" = type { %"class.WTF::Lock", ptr addrspace(200) }
%"class.WTF::ParallelHelperClient" = type <{ %"class.WTF::RefPtr.172", %"class.WTF::RefPtr.186", i32, [12 x i8] }>
%"class.WTF::RefPtr.172" = type { ptr addrspace(200) }
%"class.WTF::RefPtr.186" = type { ptr addrspace(200) }
%"class.JSC::Strong" = type { %"class.JSC::Handle" }
%"class.JSC::Handle" = type { %"class.JSC::HandleBase" }
%"class.JSC::HandleBase" = type { ptr addrspace(200) }
%"class.JSC::Strong.187" = type { %"class.JSC::Handle.188" }
%"class.JSC::Handle.188" = type { %"class.JSC::HandleBase" }
%"class.WTF::SymbolRegistry" = type { %"class.WTF::HashSet.190" }
%"class.WTF::HashSet.190" = type { %"class.WTF::HashTable.191" }
%"class.WTF::HashTable.191" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::SmallStrings" = type <{ ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), [256 x ptr addrspace(200)], %"class.std::__1::unique_ptr.198", i8, [15 x i8] }>
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { ptr addrspace(200) }
%"class.JSC::NumericStrings" = type { %"struct.std::__1::array.204", %"struct.std::__1::array.205", %"struct.std::__1::array.207", %"struct.std::__1::array.209" }
%"struct.std::__1::array.204" = type { [64 x %"struct.JSC::NumericStrings::CacheEntry"] }
%"struct.JSC::NumericStrings::CacheEntry" = type { double, %"class.WTF::String" }
%"struct.std::__1::array.205" = type { [64 x %"struct.JSC::NumericStrings::CacheEntry.206"] }
%"struct.JSC::NumericStrings::CacheEntry.206" = type { i32, %"class.WTF::String" }
%"struct.std::__1::array.207" = type { [64 x %"struct.JSC::NumericStrings::CacheEntry.208"] }
%"struct.JSC::NumericStrings::CacheEntry.208" = type { i32, %"class.WTF::String" }
%"struct.std::__1::array.209" = type { [64 x %"class.WTF::String"] }
%"class.JSC::DateInstanceCache" = type { %"struct.std::__1::array.210" }
%"struct.std::__1::array.210" = type { [16 x %"struct.JSC::DateInstanceCache::CacheEntry"] }
%"struct.JSC::DateInstanceCache::CacheEntry" = type { double, %"class.WTF::RefPtr.211" }
%"class.WTF::RefPtr.211" = type { ptr addrspace(200) }
%"class.WTF::SimpleStats" = type { double, double, double }
%"class.JSC::WeakGCMap" = type { %"class.WTF::HashMap.213", ptr addrspace(200) }
%"class.WTF::HashMap.213" = type { %"class.WTF::HashTable.214" }
%"class.WTF::HashTable.214" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::WeakGCMap.216" = type { %"class.WTF::HashMap.217", ptr addrspace(200) }
%"class.WTF::HashMap.217" = type { %"class.WTF::HashTable.218" }
%"class.WTF::HashTable.218" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::Strong.220" = type { %"class.JSC::Handle.221" }
%"class.JSC::Handle.221" = type { %"class.JSC::HandleBase" }
%"class.JSC::PrototypeMap" = type { %"class.JSC::WeakGCMap.223", %"class.JSC::WeakGCMap.227" }
%"class.JSC::WeakGCMap.223" = type { %"class.WTF::HashMap.224", ptr addrspace(200) }
%"class.WTF::HashMap.224" = type { %"class.WTF::HashTable.225" }
%"class.WTF::HashTable.225" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.JSC::WeakGCMap.227" = type { %"class.WTF::HashMap.228", ptr addrspace(200) }
%"class.WTF::HashMap.228" = type { %"class.WTF::HashTable.229" }
%"class.WTF::HashTable.229" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.WTF::HashMap.231" = type { %"class.WTF::HashTable.232" }
%"class.WTF::HashTable.232" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.243" = type { %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { ptr addrspace(200) }
%"class.WTF::Vector.249" = type { %"class.WTF::VectorBuffer.base.254", [8 x i8] }
%"class.WTF::VectorBuffer.base.254" = type { %"class.WTF::VectorBufferBase.base.253" }
%"class.WTF::VectorBufferBase.base.253" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::HashSet.256" = type { %"class.WTF::HashTable.257" }
%"class.WTF::HashTable.257" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"struct.JSC::LocalTimeOffsetCache" = type <{ %"struct.WTF::LocalTimeOffset", double, double, double, i32, [4 x i8] }>
%"struct.WTF::LocalTimeOffset" = type { i8, i32 }
%"class.WTF::String" = type { %"class.WTF::RefPtr.20" }
%"class.WTF::RefPtr.20" = type { ptr addrspace(200) }
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { ptr addrspace(200) }
%"class.WTF::RefPtr.264" = type { ptr addrspace(200) }
%"class.WTF::BumpPointerAllocator" = type { ptr addrspace(200) }
%struct.anon.266 = type { ptr addrspace(200), ptr addrspace(200) }
%"class.std::__1::unique_ptr.267" = type { %"class.std::__1::__compressed_pair.268" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { ptr addrspace(200) }
%"class.std::__1::unique_ptr.273" = type { %"class.std::__1::__compressed_pair.274" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { ptr addrspace(200) }
%"class.WTF::HashMap.279" = type { %"class.WTF::HashTable.280" }
%"class.WTF::HashTable.280" = type { ptr addrspace(200), i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.282" = type { %"class.std::__1::__compressed_pair.283" }
%"class.std::__1::__compressed_pair.283" = type { %"struct.std::__1::__compressed_pair_elem.284" }
%"struct.std::__1::__compressed_pair_elem.284" = type { ptr addrspace(200) }
%"class.std::__1::unique_ptr.288" = type { %"class.std::__1::__compressed_pair.289" }
%"class.std::__1::__compressed_pair.289" = type { %"struct.std::__1::__compressed_pair_elem.290" }
%"struct.std::__1::__compressed_pair_elem.290" = type { ptr addrspace(200) }
%"class.JSC::FunctionHasExecutedCache" = type { %"class.std::__1::unordered_map" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.294", %"class.std::__1::__compressed_pair.301", %"class.std::__1::__compressed_pair.306", %"class.std::__1::__compressed_pair.308", [4 x i8] }>
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type <{ %"struct.std::__1::__compressed_pair_elem.296", %"struct.std::__1::__compressed_pair_elem.297", [8 x i8] }>
%"struct.std::__1::__compressed_pair_elem.296" = type { ptr addrspace(200) }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { i64 }
%"class.std::__1::__compressed_pair.301" = type { %"struct.std::__1::__compressed_pair_elem.302" }
%"struct.std::__1::__compressed_pair_elem.302" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__hash_node_base" = type { ptr addrspace(200) }
%"class.std::__1::__compressed_pair.306" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"class.std::__1::__compressed_pair.308" = type { %"struct.std::__1::__compressed_pair_elem.309" }
%"struct.std::__1::__compressed_pair_elem.309" = type { float }
%"class.std::__1::unique_ptr.311" = type { %"class.std::__1::__compressed_pair.312" }
%"class.std::__1::__compressed_pair.312" = type { %"struct.std::__1::__compressed_pair_elem.313" }
%"struct.std::__1::__compressed_pair_elem.313" = type { ptr addrspace(200) }
%"class.WTF::Deque" = type { i64, i64, %"class.WTF::VectorBuffer.326" }
%"class.WTF::VectorBuffer.326" = type { %"class.WTF::VectorBufferBase.base.329", [8 x i8] }
%"class.WTF::VectorBufferBase.base.329" = type <{ ptr addrspace(200), i32, i32 }>
%"class.WTF::MallocPtr" = type { ptr addrspace(200) }
%"class.WTF::RefPtr.331" = type { ptr addrspace(200) }
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334" }
%"struct.std::__1::__compressed_pair_elem.334" = type { ptr addrspace(200) }
%"union.JSC::StructureIDTable::StructureOrOffset" = type { ptr addrspace(200) }
%"class.JSC::Structure" = type <{ %"class.JSC::JSCell", %"class.JSC::StructureIDBlob", i8, [15 x i8], %"class.JSC::WriteBarrier.35", %"class.JSC::WriteBarrier.37", %"class.JSC::WriteBarrier.39", %"class.JSC::WriteBarrier.41", %"class.WTF::RefPtr.43", ptr addrspace(200), %"class.JSC::StructureTransitionTable", %"class.JSC::WriteBarrier.44", %"class.JSC::WriteBarrier.46", %"class.JSC::InlineWatchpointSet", i32, i8, %"class.WTF::NoLock", [2 x i8], i32, [4 x i8] }>
%"class.JSC::JSCell" = type { i32, i8, i8, i8, i8 }
%"class.JSC::StructureIDBlob" = type { %union.anon.32 }
%union.anon.32 = type { i64 }
%"class.JSC::WriteBarrier.35" = type { %"class.JSC::WriteBarrierBase.36" }
%"class.JSC::WriteBarrierBase.36" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrier.37" = type { %"class.JSC::WriteBarrierBase.38" }
%"class.JSC::WriteBarrierBase.38" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrier.39" = type { %"class.JSC::WriteBarrierBase.40" }
%"class.JSC::WriteBarrierBase.40" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrier.41" = type { %"class.JSC::WriteBarrierBase.42" }
%"class.JSC::WriteBarrierBase.42" = type { ptr addrspace(200) }
%"class.WTF::RefPtr.43" = type { ptr addrspace(200) }
%"class.JSC::StructureTransitionTable" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrier.44" = type { %"class.JSC::WriteBarrierBase.45" }
%"class.JSC::WriteBarrierBase.45" = type { ptr addrspace(200) }
%"class.JSC::WriteBarrier.46" = type { %"class.JSC::WriteBarrierBase.47" }
%"class.JSC::WriteBarrierBase.47" = type { ptr addrspace(200) }
%"class.JSC::InlineWatchpointSet" = type { ptr addrspace(200) }
%"class.WTF::NoLock" = type { i8 }
%"struct.JSC::ClassInfo" = type { ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), %"struct.JSC::MethodTable", i32, [12 x i8] }
%struct.anon.1 = type { i32, [2 x i32], i32 }
%struct.anon.33 = type { i32, i8, i8, i8, i8 }
%"class.JSC::JSObject" = type { %"class.JSC::JSCell", %"class.JSC::CopyBarrier" }
%"class.JSC::CopyBarrier" = type { %"class.JSC::CopyBarrierBase" }
%"class.JSC::CopyBarrierBase" = type { ptr addrspace(200) }

@.str.31 = external hidden unnamed_addr addrspace(200) constant [24 x i8], align 1
@.str.163 = external hidden unnamed_addr addrspace(200) constant [26 x i8], align 1
@_ZN7WebCore27JSInternalSettingsGenerated6s_infoE = external addrspace(200) constant { ptr addrspace(200), ptr addrspace(200), ptr addrspace(200), %"struct.JSC::MethodTable", i32 }, align 16

declare ptr addrspace(200) @_ZN7WebCore18throwThisTypeErrorERN3JSC9ExecStateEPKcS4_(ptr addrspace(200) dereferenceable(16), ptr addrspace(200), ptr addrspace(200)) local_unnamed_addr addrspace(200) #0

declare ptr addrspace(200) @_ZN3JSC29createNotEnoughArgumentsErrorEPNS_9ExecStateE(ptr addrspace(200)) local_unnamed_addr addrspace(200) #0

declare void @_ZN7WebCore25InternalSettingsGenerated23setCaretBrowsingEnabledEb(ptr addrspace(200), i1 zeroext) local_unnamed_addr addrspace(200) #0

; Function Attrs: nounwind willreturn memory(none)
declare i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200)) addrspace(200) #1

; Function Attrs: nounwind willreturn memory(none)
declare i1 @llvm.cheri.cap.tag.get(ptr addrspace(200)) addrspace(200) #1

declare inreg { ptr addrspace(200) } @_ZN3JSC2VM14throwExceptionEPNS_9ExecStateENS_7JSValueE(ptr addrspace(200), ptr addrspace(200), ptr addrspace(200) align 16) local_unnamed_addr addrspace(200) #0

; Function Attrs: nounwind
define hidden ptr addrspace(200) @_ZN7WebCore67jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabledEPN3JSC9ExecStateE(ptr addrspace(200) %state) addrspace(200) #2 {
; CHECK-LABEL: _ZN7WebCore67jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabledEPN3JSC9ExecStateE:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -128
; CHECK-NEXT:    csd $17, $zero, 120($c11) # 8-byte Folded Spill
; CHECK-NEXT:    csd $16, $zero, 112($c11) # 8-byte Folded Spill
; CHECK-NEXT:    csc $c24, $zero, 96($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c20, $zero, 80($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c19, $zero, 64($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c18, $zero, 48($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 32($c11) # 16-byte Folded Spill
; CHECK-NEXT:    cincoffset $c24, $c11, $zero
; CHECK-NEXT:    clc $c1, $zero, 80($c3)
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c20, $1
; CHECK-NEXT:    cbts $c1, .LBB0_3
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:  .LBB0_1: # %if.then
; CHECK-NEXT:    clcbi $c4, %captab20(.str.163)($c20)
; CHECK-NEXT:    clcbi $c5, %captab20(.str.31)($c20)
; CHECK-NEXT:    clcbi $c12, %capcall20(_ZN7WebCore18throwThisTypeErrorERN3JSC9ExecStateEPKcS4_)($c20)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c18
; CHECK-NEXT:  .LBB0_2: # %cleanup44
; CHECK-NEXT:    cincoffset $c11, $c24, $zero
; CHECK-NEXT:    clc $c17, $zero, 32($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 48($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c19, $zero, 64($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c20, $zero, 80($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c24, $zero, 96($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cld $16, $zero, 112($c11) # 8-byte Folded Reload
; CHECK-NEXT:    cld $17, $zero, 120($c11) # 8-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 128
; CHECK-NEXT:  .LBB0_3: # %land.rhs.i
; CHECK-NEXT:    daddiu $1, $zero, -16384
; CHECK-NEXT:    candaddr $c2, $c1, $1
; CHECK-NEXT:    cincoffset $c3, $c2, 200
; CHECK-NEXT:    clbu $1, $zero, 0($c3)
; CHECK-NEXT:    beqz $1, .LBB0_6
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.4: # %land.lhs.true.i.i.i
; CHECK-NEXT:    clbu $1, $zero, 6($c1)
; CHECK-NEXT:    andi $1, $1, 32
; CHECK-NEXT:    bnez $1, .LBB0_6
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.5: # %if.then.i.i.i
; CHECK-NEXT:    b .LBB0_7
; CHECK-NEXT:    cincoffset $c2, $c1, 32
; CHECK-NEXT:  .LBB0_6: # %if.end.i.i.i
; CHECK-NEXT:    clc $c2, $zero, 304($c2)
; CHECK-NEXT:    clwu $1, $zero, 0($c1)
; CHECK-NEXT:    clc $c2, $zero, 224($c2)
; CHECK-NEXT:    dsll $1, $1, 4
; CHECK-NEXT:    clc $c2, $1, 0($c2)
; CHECK-NEXT:    cincoffset $c2, $c2, 112
; CHECK-NEXT:  .LBB0_7: # %_ZNK3JSC6JSCell9classInfoEv.exit.i.i
; CHECK-NEXT:    clc $c2, $zero, 0($c2)
; CHECK-NEXT:    cbez $c2, .LBB0_1
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.8: # %for.body.i.i.i.preheader
; CHECK-NEXT:    clcbi $c3, %captab20(_ZN7WebCore27JSInternalSettingsGenerated6s_infoE)($c20)
; CHECK-NEXT:  .LBB0_9: # %for.body.i.i.i
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ceq $1, $c2, $c3
; CHECK-NEXT:    bnez $1, .LBB0_12
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.10: # %for.inc.i.i.i
; CHECK-NEXT:    # in Loop: Header=BB0_9 Depth=1
; CHECK-NEXT:    clc $c2, $zero, 16($c2)
; CHECK-NEXT:    cbnz $c2, .LBB0_9
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.11: # %for.inc.i.i.i
; CHECK-NEXT:    b .LBB0_1
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB0_12: # %_ZN3JSC13jsDynamicCastIPN7WebCore27JSInternalSettingsGeneratedEEET_NS_7JSValueE.exit
; CHECK-NEXT:    cbez $c1, .LBB0_1
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.13: # %do.body
; CHECK-NEXT:    clw $1, $zero, 76($c18)
; CHECK-NEXT:    addiu $2, $zero, 1
; CHECK-NEXT:    beq $1, $2, .LBB0_26
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.14: # %if.end19
; CHECK-NEXT:    clc $c2, $zero, 96($c18)
; CHECK-NEXT:    clc $c19, $zero, 48($c1)
; CHECK-NEXT:    csc $c2, $zero, 0($c24)
; CHECK-NEXT:    cld $2, $zero, 8($c24)
; CHECK-NEXT:    daddiu $1, $zero, -1
; CHECK-NEXT:    dsll $3, $1, 48
; CHECK-NEXT:    sltu $1, $2, $3
; CHECK-NEXT:    bnez $1, .LBB0_16
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.15: # %if.then.i
; CHECK-NEXT:    sll $1, $2, 0
; CHECK-NEXT:    b .LBB0_22
; CHECK-NEXT:    sltu $2, $zero, $1
; CHECK-NEXT:  .LBB0_16: # %if.end.i
; CHECK-NEXT:    daddu $16, $2, $3
; CHECK-NEXT:    daddiu $1, $zero, 32767
; CHECK-NEXT:    dsll $1, $1, 49
; CHECK-NEXT:    daddiu $1, $1, -1
; CHECK-NEXT:    sltu $1, $1, $16
; CHECK-NEXT:    bnez $1, .LBB0_18
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.17: # %if.then4.i
; CHECK-NEXT:    clcbi $c12, %capcall20(__eqdf2)($c20)
; CHECK-NEXT:    daddiu $5, $zero, 0
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    move $4, $16
; CHECK-NEXT:    sltu $17, $zero, $2
; CHECK-NEXT:    clcbi $c12, %capcall20(__unorddf2)($c20)
; CHECK-NEXT:    daddiu $5, $zero, 0
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    move $4, $16
; CHECK-NEXT:    sltiu $1, $2, 1
; CHECK-NEXT:    b .LBB0_22
; CHECK-NEXT:    and $2, $1, $17
; CHECK-NEXT:  .LBB0_18: # %if.end8.i
; CHECK-NEXT:    cbtu $c2, .LBB0_21
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.19: # %if.then10.i
; CHECK-NEXT:    clbu $1, $zero, 5($c2)
; CHECK-NEXT:    addiu $2, $zero, 6
; CHECK-NEXT:    bne $1, $2, .LBB0_24
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.20: # %if.then.i.i
; CHECK-NEXT:    clw $1, $zero, 12($c2)
; CHECK-NEXT:    b .LBB0_22
; CHECK-NEXT:    sltu $2, $zero, $1
; CHECK-NEXT:  .LBB0_21: # %if.end13.i
; CHECK-NEXT:    daddiu $1, $zero, 7
; CHECK-NEXT:    csd $1, $zero, 24($c24)
; CHECK-NEXT:    clc $c1, $zero, 16($c24)
; CHECK-NEXT:    ceq $2, $c2, $c1
; CHECK-NEXT:  .LBB0_22: # %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit
; CHECK-NEXT:    clc $c1, $zero, 48($c18)
; CHECK-NEXT:    daddiu $1, $zero, -16384
; CHECK-NEXT:    candaddr $c1, $c1, $1
; CHECK-NEXT:    clc $c1, $zero, 304($c1)
; CHECK-NEXT:    ori $1, $zero, 47200
; CHECK-NEXT:    clc $c1, $1, 0($c1)
; CHECK-NEXT:    cbnz $c1, .LBB0_27
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.23: # %if.end36
; CHECK-NEXT:    dsll $1, $2, 32
; CHECK-NEXT:    clcbi $c12, %capcall20(_ZN7WebCore25InternalSettingsGenerated23setCaretBrowsingEnabledEb)($c20)
; CHECK-NEXT:    dsrl $4, $1, 32
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c19
; CHECK-NEXT:    daddiu $1, $zero, 10
; CHECK-NEXT:    csd $1, $zero, 24($c24)
; CHECK-NEXT:    b .LBB0_2
; CHECK-NEXT:    clc $c3, $zero, 16($c24)
; CHECK-NEXT:  .LBB0_24: # %if.end.i.i
; CHECK-NEXT:    daddiu $3, $zero, -16384
; CHECK-NEXT:    candaddr $c1, $c2, $3
; CHECK-NEXT:    clc $c1, $zero, 304($c1)
; CHECK-NEXT:    clwu $1, $zero, 0($c2)
; CHECK-NEXT:    clc $c1, $zero, 224($c1)
; CHECK-NEXT:    dsll $1, $1, 4
; CHECK-NEXT:    clc $c1, $1, 0($c1)
; CHECK-NEXT:    clbu $1, $zero, 14($c1)
; CHECK-NEXT:    andi $1, $1, 1
; CHECK-NEXT:    beqz $1, .LBB0_22
; CHECK-NEXT:    addiu $2, $zero, 1
; CHECK-NEXT:  # %bb.25: # %land.rhs.i.i.i
; CHECK-NEXT:    clc $c2, $zero, 48($c18)
; CHECK-NEXT:    candaddr $c3, $c2, $3
; CHECK-NEXT:    clc $c3, $zero, 304($c3)
; CHECK-NEXT:    clwu $1, $zero, 0($c2)
; CHECK-NEXT:    clc $c2, $zero, 224($c3)
; CHECK-NEXT:    dsll $1, $1, 4
; CHECK-NEXT:    clc $c2, $1, 0($c2)
; CHECK-NEXT:    clc $c2, $zero, 32($c2)
; CHECK-NEXT:    clc $c1, $zero, 32($c1)
; CHECK-NEXT:    b .LBB0_22
; CHECK-NEXT:    cne $2, $c1, $c2
; CHECK-NEXT:  .LBB0_26: # %if.then15
; CHECK-NEXT:    clcbi $c12, %capcall20(_ZN3JSC29createNotEnoughArgumentsErrorEPNS_9ExecStateE)($c20)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c3, $c18
; CHECK-NEXT:    clc $c1, $zero, 48($c18)
; CHECK-NEXT:    daddiu $1, $zero, -16384
; CHECK-NEXT:    candaddr $c1, $c1, $1
; CHECK-NEXT:    clc $c1, $zero, 304($c1)
; CHECK-NEXT:    csc $c3, $zero, 16($c24)
; CHECK-NEXT:    clcbi $c12, %capcall20(_ZN3JSC2VM14throwExceptionEPNS_9ExecStateENS_7JSValueE)($c20)
; CHECK-NEXT:    cincoffset $c5, $c24, 16
; CHECK-NEXT:    csetbounds $c5, $c5, 16
; CHECK-NEXT:    cmove $c3, $c1
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    cmove $c4, $c18
; CHECK-NEXT:    b .LBB0_2
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB0_27: # %if.then30
; CHECK-NEXT:    daddiu $1, $zero, 10
; CHECK-NEXT:    csd $1, $zero, 24($c24)
; CHECK-NEXT:    b .LBB0_2
; CHECK-NEXT:    clc $c3, $zero, 16($c24)
entry:
  %agg.tmp1.i = alloca %"class.JSC::JSValue", align 16, addrspace(200)
  %ref.tmp3.sroa.0.i.i = alloca ptr addrspace(200), align 16, addrspace(200)
  %retval.sroa.0.i61 = alloca ptr addrspace(200), align 16, addrspace(200)
  %retval.sroa.0.i = alloca ptr addrspace(200), align 16, addrspace(200)
  %ref.tmp.sroa.0 = alloca ptr addrspace(200), align 16, addrspace(200)
  %value.i.i = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 5, i32 0, i32 0, i32 0
  %0 = load ptr addrspace(200), ptr addrspace(200) %value.i.i, align 16
  %1 = tail call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %0) #4
  br i1 %1, label %land.rhs.i, label %if.then, !prof !3

land.rhs.i:                                       ; preds = %entry
  %2 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %0) #4
  %unaligned_bits.i.i.i.i79 = and i64 %2, 16383
  %sub.i.i.i.i80 = sub nsw i64 0, %unaligned_bits.i.i.i.i79
  %aligned_cap.i.i.i.i81 = getelementptr inbounds i8, ptr addrspace(200) %0, i64 %sub.i.i.i.i80
  %3 = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i81, i64 200
  %4 = load i8, ptr addrspace(200) %3, align 8, !range !4
  %tobool.i.i.i.i = icmp eq i8 %4, 0
  br i1 %tobool.i.i.i.i, label %if.end.i.i.i, label %land.lhs.true.i.i.i

land.lhs.true.i.i.i:                              ; preds = %land.rhs.i
  %5 = getelementptr inbounds i8, ptr addrspace(200) %0, i64 6
  %6 = load i8, ptr addrspace(200) %5, align 2
  %7 = and i8 %6, 32
  %tobool.i.i.i82 = icmp eq i8 %7, 0
  br i1 %tobool.i.i.i82, label %if.then.i.i.i, label %if.end.i.i.i

if.then.i.i.i:                                    ; preds = %land.lhs.true.i.i.i
  %m_classInfo.i10.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %0, i64 32
  %8 = bitcast ptr addrspace(200) %m_classInfo.i10.i.i.i to ptr addrspace(200)
  br label %_ZNK3JSC6JSCell9classInfoEv.exit.i.i

if.end.i.i.i:                                     ; preds = %land.lhs.true.i.i.i, %land.rhs.i
  %m_vm.i.i.i.i.i83 = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i81, i64 304
  %9 = bitcast ptr addrspace(200) %m_vm.i.i.i.i.i83 to ptr addrspace(200)
  %10 = load ptr addrspace(200), ptr addrspace(200) %9, align 16
  %m_structureID.i.i.i.i = bitcast ptr addrspace(200) %0 to ptr addrspace(200)
  %11 = load i32, ptr addrspace(200) %m_structureID.i.i.i.i, align 4
  %__value_.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.JSC::VM", ptr addrspace(200) %10, i64 0, i32 2, i32 18, i32 2, i32 0, i32 0, i32 0
  %12 = load ptr addrspace(200), ptr addrspace(200) %__value_.i.i.i.i.i.i.i.i.i, align 16
  %idxprom.i.i.i.i.i = zext i32 %11 to i64
  %structure.i.i.i.i.i = getelementptr inbounds %"union.JSC::StructureIDTable::StructureOrOffset", ptr addrspace(200) %12, i64 %idxprom.i.i.i.i.i, i32 0
  %13 = load ptr addrspace(200), ptr addrspace(200) %structure.i.i.i.i.i, align 16
  %m_classInfo.i.i.i.i = getelementptr inbounds %"class.JSC::Structure", ptr addrspace(200) %13, i64 0, i32 9
  br label %_ZNK3JSC6JSCell9classInfoEv.exit.i.i

_ZNK3JSC6JSCell9classInfoEv.exit.i.i:             ; preds = %if.end.i.i.i, %if.then.i.i.i
  %retval.0.in.i.i.i = phi ptr addrspace(200) [ %m_classInfo.i.i.i.i, %if.end.i.i.i ], [ %8, %if.then.i.i.i ]
  %retval.0.i.i.i = load ptr addrspace(200), ptr addrspace(200) %retval.0.in.i.i.i, align 16
  %tobool5.i.i.i = icmp eq ptr addrspace(200) %retval.0.i.i.i, null
  br i1 %tobool5.i.i.i, label %if.then, label %for.body.i.i.i, !prof !5

for.body.i.i.i:                                   ; preds = %for.inc.i.i.i, %_ZNK3JSC6JSCell9classInfoEv.exit.i.i
  %ci.06.i.i.i = phi ptr addrspace(200) [ %14, %for.inc.i.i.i ], [ %retval.0.i.i.i, %_ZNK3JSC6JSCell9classInfoEv.exit.i.i ]
  %cmp.i.i.i84 = icmp eq ptr addrspace(200) %ci.06.i.i.i, @_ZN7WebCore27JSInternalSettingsGenerated6s_infoE
  br i1 %cmp.i.i.i84, label %_ZN3JSC13jsDynamicCastIPN7WebCore27JSInternalSettingsGeneratedEEET_NS_7JSValueE.exit, label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %for.body.i.i.i
  %parentClass.i.i.i = getelementptr inbounds %"struct.JSC::ClassInfo", ptr addrspace(200) %ci.06.i.i.i, i64 0, i32 1
  %14 = load ptr addrspace(200), ptr addrspace(200) %parentClass.i.i.i, align 16
  %tobool.i3.i.i = icmp eq ptr addrspace(200) %14, null
  br i1 %tobool.i3.i.i, label %if.then, label %for.body.i.i.i, !prof !5

_ZN3JSC13jsDynamicCastIPN7WebCore27JSInternalSettingsGeneratedEEET_NS_7JSValueE.exit: ; preds = %for.body.i.i.i
  %tobool = icmp eq ptr addrspace(200) %0, null
  br i1 %tobool, label %if.then, label %do.body, !prof !3

if.then:                                          ; preds = %_ZN3JSC13jsDynamicCastIPN7WebCore27JSInternalSettingsGeneratedEEET_NS_7JSValueE.exit, %for.inc.i.i.i, %_ZNK3JSC6JSCell9classInfoEv.exit.i.i, %entry
  %call6 = tail call ptr addrspace(200) @_ZN7WebCore18throwThisTypeErrorERN3JSC9ExecStateEPKcS4_(ptr addrspace(200) dereferenceable(16) %state, ptr addrspace(200) @.str.163, ptr addrspace(200) @.str.31) #4
  br label %cleanup44

do.body:                                          ; preds = %_ZN3JSC13jsDynamicCastIPN7WebCore27JSInternalSettingsGeneratedEEET_NS_7JSValueE.exit
  %m_ptr.i.i = getelementptr inbounds i8, ptr addrspace(200) %0, i64 48
  %15 = bitcast ptr addrspace(200) %m_ptr.i.i to ptr addrspace(200)
  %16 = load ptr addrspace(200), ptr addrspace(200) %15, align 16
  %17 = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 4, i32 0
  %asBits.i.i.i = bitcast ptr addrspace(200) %17 to ptr addrspace(200)
  %payload.i.i.i = getelementptr inbounds %struct.anon.1, ptr addrspace(200) %asBits.i.i.i, i64 0, i32 2
  %18 = load i32, ptr addrspace(200) %payload.i.i.i, align 4
  %cmp = icmp eq i32 %18, 1
  br i1 %cmp, label %if.then15, label %if.end19, !prof !3

if.then15:                                        ; preds = %do.body
  %call17 = tail call ptr addrspace(200) @_ZN3JSC29createNotEnoughArgumentsErrorEPNS_9ExecStateE(ptr addrspace(200) %state) #4
  %19 = bitcast ptr addrspace(200) %agg.tmp1.i to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 16, ptr addrspace(200) nonnull %19)
  %value.i.i.i.i72 = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 3, i32 0, i32 0, i32 0
  %20 = load ptr addrspace(200), ptr addrspace(200) %value.i.i.i.i72, align 16
  %21 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %20) #4
  %unaligned_bits.i.i.i.i73 = and i64 %21, 16383
  %sub.i.i.i.i74 = sub nsw i64 0, %unaligned_bits.i.i.i.i73
  %aligned_cap.i.i.i.i75 = getelementptr inbounds i8, ptr addrspace(200) %20, i64 %sub.i.i.i.i74
  %m_vm.i.i.i.i.i76 = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i75, i64 304
  %22 = bitcast ptr addrspace(200) %m_vm.i.i.i.i.i76 to ptr addrspace(200)
  %23 = load ptr addrspace(200), ptr addrspace(200) %22, align 16
  %24 = bitcast ptr addrspace(200) %agg.tmp1.i to ptr addrspace(200)
  store ptr addrspace(200) %call17, ptr addrspace(200) %24, align 16
  %call2.i = tail call inreg { ptr addrspace(200) } @_ZN3JSC2VM14throwExceptionEPNS_9ExecStateENS_7JSValueE(ptr addrspace(200) nonnull %23, ptr addrspace(200) %state, ptr addrspace(200) nonnull align 16 %agg.tmp1.i) #4
  %25 = extractvalue { ptr addrspace(200) } %call2.i, 0
  call void @llvm.lifetime.end.p200(i64 16, ptr addrspace(200) nonnull %19)
  br label %cleanup44

if.end19:                                         ; preds = %do.body
  %ref.tmp.sroa.0.0..sroa_cast89 = bitcast ptr addrspace(200) %ref.tmp.sroa.0 to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 16, ptr addrspace(200) nonnull %ref.tmp.sroa.0.0..sroa_cast89)
  %value.i.i.i = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 6, i32 0, i32 0, i32 0
  %26 = load ptr addrspace(200), ptr addrspace(200) %value.i.i.i, align 16
  %27 = bitcast ptr addrspace(200) %26 to ptr addrspace(200)
  store ptr addrspace(200) %26, ptr addrspace(200) %ref.tmp.sroa.0, align 16
  %ref.tmp.sroa.0.8._asInt64.i.i.sroa_raw_idx92 = getelementptr inbounds i8, ptr addrspace(200) %ref.tmp.sroa.0.0..sroa_cast89, i64 8
  %ref.tmp.sroa.0.8._asInt64.i.i.sroa_cast93 = bitcast ptr addrspace(200) %ref.tmp.sroa.0.8._asInt64.i.i.sroa_raw_idx92 to ptr addrspace(200)
  %ref.tmp.sroa.0.8.ref.tmp.sroa.0.8. = load i64, ptr addrspace(200) %ref.tmp.sroa.0.8._asInt64.i.i.sroa_cast93, align 8
  %cmp.i.i = icmp ugt i64 %ref.tmp.sroa.0.8.ref.tmp.sroa.0.8., -281474976710657
  br i1 %cmp.i.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end19
  %conv.i.i = trunc i64 %ref.tmp.sroa.0.8.ref.tmp.sroa.0.8. to i32
  %tobool.i67 = icmp ne i32 %conv.i.i, 0
  br label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit

if.end.i:                                         ; preds = %if.end19
  %.off.i.i = add i64 %ref.tmp.sroa.0.8.ref.tmp.sroa.0.8., -281474976710656
  %28 = icmp ult i64 %.off.i.i, -562949953421312
  br i1 %28, label %if.then4.i, label %if.end8.i

if.then4.i:                                       ; preds = %if.end.i
  %29 = bitcast i64 %.off.i.i to double
  %30 = fcmp one double %29, 0.000000e+00
  br label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit

if.end8.i:                                        ; preds = %if.end.i
  %31 = tail call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %26) #4
  br i1 %31, label %if.then10.i, label %if.end13.i

if.then10.i:                                      ; preds = %if.end8.i
  %32 = getelementptr inbounds i8, ptr addrspace(200) %26, i64 5
  %33 = load i8, ptr addrspace(200) %32, align 1
  %cmp.i.i15.i = icmp eq i8 %33, 6
  br i1 %cmp.i.i15.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then10.i
  %34 = getelementptr inbounds i8, ptr addrspace(200) %26, i64 12
  %35 = bitcast ptr addrspace(200) %34 to ptr addrspace(200)
  %36 = load i32, ptr addrspace(200) %35, align 4
  %tobool.i.i.i = icmp ne i32 %36, 0
  br label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit

if.end.i.i:                                       ; preds = %if.then10.i
  %37 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %26) #4
  %unaligned_bits.i.i.i.i.i = and i64 %37, 16383
  %sub.i.i.i.i.i = sub nsw i64 0, %unaligned_bits.i.i.i.i.i
  %aligned_cap.i.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %26, i64 %sub.i.i.i.i.i
  %m_vm.i.i.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i.i, i64 304
  %38 = bitcast ptr addrspace(200) %m_vm.i.i.i.i.i.i to ptr addrspace(200)
  %39 = load ptr addrspace(200), ptr addrspace(200) %38, align 16
  %40 = load i32, ptr addrspace(200) %27, align 4
  %__value_.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.JSC::VM", ptr addrspace(200) %39, i64 0, i32 2, i32 18, i32 2, i32 0, i32 0, i32 0
  %41 = load ptr addrspace(200), ptr addrspace(200) %__value_.i.i.i.i.i.i.i.i, align 16
  %idxprom.i.i.i.i = zext i32 %40 to i64
  %structure.i.i.i.i = getelementptr inbounds %"union.JSC::StructureIDTable::StructureOrOffset", ptr addrspace(200) %41, i64 %idxprom.i.i.i.i, i32 0
  %42 = load ptr addrspace(200), ptr addrspace(200) %structure.i.i.i.i, align 16
  %43 = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 3, i32 0
  %44 = bitcast ptr addrspace(200) %43 to ptr addrspace(200)
  %45 = load ptr addrspace(200), ptr addrspace(200) %44, align 16
  %46 = bitcast ptr addrspace(200) %45 to ptr addrspace(200)
  %m_blob.i.i.i.i = getelementptr inbounds %"class.JSC::Structure", ptr addrspace(200) %42, i64 0, i32 1
  %fields.i.i.i.i.i.i = bitcast ptr addrspace(200) %m_blob.i.i.i.i to ptr addrspace(200)
  %inlineTypeFlags.i.i.i.i.i.i = getelementptr inbounds %struct.anon.33, ptr addrspace(200) %fields.i.i.i.i.i.i, i64 0, i32 3
  %47 = load i8, ptr addrspace(200) %inlineTypeFlags.i.i.i.i.i.i, align 2
  %48 = and i8 %47, 1
  %tobool.i.i.i.i.i = icmp eq i8 %48, 0
  br i1 %tobool.i.i.i.i.i, label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit, label %land.rhs.i.i.i

land.rhs.i.i.i:                                   ; preds = %if.end.i.i
  %49 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %46) #4
  %unaligned_bits.i.i.i.i.i.i.i = and i64 %49, 16383
  %sub.i.i.i.i.i.i.i = sub nsw i64 0, %unaligned_bits.i.i.i.i.i.i.i
  %aligned_cap.i.i.i.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %46, i64 %sub.i.i.i.i.i.i.i
  %m_vm.i.i.i.i.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i.i.i.i, i64 304
  %50 = bitcast ptr addrspace(200) %m_vm.i.i.i.i.i.i.i.i to ptr addrspace(200)
  %51 = load ptr addrspace(200), ptr addrspace(200) %50, align 16
  %__value_.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.JSC::VM", ptr addrspace(200) %51, i64 0, i32 2, i32 18, i32 2, i32 0, i32 0, i32 0
  %52 = load ptr addrspace(200), ptr addrspace(200) %__value_.i.i.i.i.i.i.i.i.i.i, align 16
  %m_structureID.i.i.i.i.i = getelementptr inbounds %"class.JSC::JSObject", ptr addrspace(200) %45, i64 0, i32 0, i32 0
  %53 = load i32, ptr addrspace(200) %m_structureID.i.i.i.i.i, align 4
  %idxprom.i.i.i.i.i.i = zext i32 %53 to i64
  %structure.i.i.i.i.i.i = getelementptr inbounds %"union.JSC::StructureIDTable::StructureOrOffset", ptr addrspace(200) %52, i64 %idxprom.i.i.i.i.i.i, i32 0
  %54 = load ptr addrspace(200), ptr addrspace(200) %structure.i.i.i.i.i.i, align 16
  %55 = getelementptr inbounds %"class.JSC::Structure", ptr addrspace(200) %54, i64 0, i32 4, i32 0
  %56 = bitcast ptr addrspace(200) %55 to ptr addrspace(200)
  %57 = load ptr addrspace(200), ptr addrspace(200) %56, align 16
  %58 = getelementptr inbounds %"class.JSC::Structure", ptr addrspace(200) %42, i64 0, i32 4, i32 0
  %59 = bitcast ptr addrspace(200) %58 to ptr addrspace(200)
  %60 = load ptr addrspace(200), ptr addrspace(200) %59, align 16
  %cmp.i6.i.i = icmp ne ptr addrspace(200) %60, %57
  br label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit

if.end13.i:                                       ; preds = %if.end8.i
  %ref.tmp3.sroa.0.i.i.0.i.0..sroa_cast = bitcast ptr addrspace(200) %ref.tmp3.sroa.0.i.i to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 16, ptr addrspace(200) nonnull %ref.tmp3.sroa.0.i.i.0.i.0..sroa_cast)
  %ref.tmp3.sroa.0.i.i.8.i.8._asInt64.i.sroa_raw_idx = getelementptr inbounds i8, ptr addrspace(200) %ref.tmp3.sroa.0.i.i.0.i.0..sroa_cast, i64 8
  %ref.tmp3.sroa.0.i.i.8.i.8._asInt64.i.sroa_cast = bitcast ptr addrspace(200) %ref.tmp3.sroa.0.i.i.8.i.8._asInt64.i.sroa_raw_idx to ptr addrspace(200)
  store i64 7, ptr addrspace(200) %ref.tmp3.sroa.0.i.i.8.i.8._asInt64.i.sroa_cast, align 8
  %ref.tmp3.sroa.0.i.i.0.ref.tmp3.sroa.0.i.0.ref.tmp3.sroa.0.0.ref.tmp3.sroa.0.0..i.i = load ptr addrspace(200), ptr addrspace(200) %ref.tmp3.sroa.0.i.i, align 16
  %cmp.i.i.i = icmp eq ptr addrspace(200) %26, %ref.tmp3.sroa.0.i.i.0.ref.tmp3.sroa.0.i.0.ref.tmp3.sroa.0.0.ref.tmp3.sroa.0.0..i.i
  call void @llvm.lifetime.end.p200(i64 16, ptr addrspace(200) nonnull %ref.tmp3.sroa.0.i.i.0.i.0..sroa_cast)
  br label %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit

_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit:  ; preds = %if.end13.i, %land.rhs.i.i.i, %if.end.i.i, %if.then.i.i, %if.then4.i, %if.then.i
  %retval.0.i = phi i1 [ %tobool.i67, %if.then.i ], [ %cmp.i.i.i, %if.end13.i ], [ %30, %if.then4.i ], [ %tobool.i.i.i, %if.then.i.i ], [ true, %if.end.i.i ], [ %cmp.i6.i.i, %land.rhs.i.i.i ]
  call void @llvm.lifetime.end.p200(i64 16, ptr addrspace(200) nonnull %ref.tmp.sroa.0.0..sroa_cast89)
  %value.i.i.i.i = getelementptr inbounds %"class.JSC::ExecState", ptr addrspace(200) %state, i64 3, i32 0, i32 0, i32 0
  %61 = load ptr addrspace(200), ptr addrspace(200) %value.i.i.i.i, align 16
  %62 = tail call i64 @llvm.cheri.cap.address.get.i64(ptr addrspace(200) %61) #4
  %unaligned_bits.i.i.i.i = and i64 %62, 16383
  %sub.i.i.i.i = sub nsw i64 0, %unaligned_bits.i.i.i.i
  %aligned_cap.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %61, i64 %sub.i.i.i.i
  %m_vm.i.i.i.i.i = getelementptr inbounds i8, ptr addrspace(200) %aligned_cap.i.i.i.i, i64 304
  %63 = bitcast ptr addrspace(200) %m_vm.i.i.i.i.i to ptr addrspace(200)
  %64 = load ptr addrspace(200), ptr addrspace(200) %63, align 16
  %m_exception.i.i = getelementptr inbounds %"class.JSC::VM", ptr addrspace(200) %64, i64 0, i32 97
  %65 = load ptr addrspace(200), ptr addrspace(200) %m_exception.i.i, align 16
  %tobool.i = icmp eq ptr addrspace(200) %65, null
  br i1 %tobool.i, label %if.end36, label %if.then30, !prof !6

if.then30:                                        ; preds = %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit
  %retval.sroa.0.i61.0..sroa_cast = bitcast ptr addrspace(200) %retval.sroa.0.i61 to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 16, ptr addrspace(200) nonnull %retval.sroa.0.i61.0..sroa_cast)
  %retval.sroa.0.i61.8._asInt64.i.sroa_raw_idx = getelementptr inbounds i8, ptr addrspace(200) %retval.sroa.0.i61.0..sroa_cast, i64 8
  %retval.sroa.0.i61.8._asInt64.i.sroa_cast = bitcast ptr addrspace(200) %retval.sroa.0.i61.8._asInt64.i.sroa_raw_idx to ptr addrspace(200)
  store i64 10, ptr addrspace(200) %retval.sroa.0.i61.8._asInt64.i.sroa_cast, align 8
  %retval.sroa.0.i61.0.retval.sroa.0.0.retval.sroa.0.0..fca.0.load.i65 = load ptr addrspace(200), ptr addrspace(200) %retval.sroa.0.i61, align 16
  call void @llvm.lifetime.end.p200(i64 16, ptr addrspace(200) nonnull %retval.sroa.0.i61.0..sroa_cast)
  br label %cleanup44

if.end36:                                         ; preds = %_ZNK3JSC7JSValue9toBooleanEPNS_9ExecStateE.exit
  tail call void @_ZN7WebCore25InternalSettingsGenerated23setCaretBrowsingEnabledEb(ptr addrspace(200) nonnull %16, i1 zeroext %retval.0.i) #4
  %retval.sroa.0.i.0..sroa_cast = bitcast ptr addrspace(200) %retval.sroa.0.i to ptr addrspace(200)
  call void @llvm.lifetime.start.p200(i64 16, ptr addrspace(200) nonnull %retval.sroa.0.i.0..sroa_cast)
  %retval.sroa.0.i.8._asInt64.i.sroa_raw_idx = getelementptr inbounds i8, ptr addrspace(200) %retval.sroa.0.i.0..sroa_cast, i64 8
  %retval.sroa.0.i.8._asInt64.i.sroa_cast = bitcast ptr addrspace(200) %retval.sroa.0.i.8._asInt64.i.sroa_raw_idx to ptr addrspace(200)
  store i64 10, ptr addrspace(200) %retval.sroa.0.i.8._asInt64.i.sroa_cast, align 8
  %retval.sroa.0.i.0.retval.sroa.0.0.retval.sroa.0.0..fca.0.load.i = load ptr addrspace(200), ptr addrspace(200) %retval.sroa.0.i, align 16
  call void @llvm.lifetime.end.p200(i64 16, ptr addrspace(200) nonnull %retval.sroa.0.i.0..sroa_cast)
  br label %cleanup44

cleanup44:                                        ; preds = %if.end36, %if.then30, %if.then15, %if.then
  %retval.2 = phi ptr addrspace(200) [ %call6, %if.then ], [ %25, %if.then15 ], [ %retval.sroa.0.i61.0.retval.sroa.0.0.retval.sroa.0.0..fca.0.load.i65, %if.then30 ], [ %retval.sroa.0.i.0.retval.sroa.0.0.retval.sroa.0.0..fca.0.load.i, %if.end36 ]
  ret ptr addrspace(200) %retval.2
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #3

attributes #0 = { "disable-tail-calls"="false" }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nounwind "frame-pointer"="all" "target-features"="+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 1}
!2 = !{!"clang version 8.0.0 (https://github.com/llvm-mirror/clang.git 9958ffcb30eb715acdaa8fca2d0cac8f6b5ef11d) (https://github.com/llvm-mirror/llvm.git 523465cbe5e68dfcf83975ecc4c67af1a3f033b0)"}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 1073205, i32 2146410443}
!6 = !{!"branch_weights", i32 2000, i32 1}
