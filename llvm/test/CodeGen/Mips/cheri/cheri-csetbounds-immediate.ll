; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc %s -o - | FileCheck %s

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200), i64) #0

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBoundsUnknown(ptr addrspace(200) %c, i64 %bounds) #1 {
; CHECK-LABEL: setBoundsUnknown:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, $4
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 %bounds)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBoundsConstant1(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: setBoundsConstant1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, 1
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 1)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBoundsConstantMaxImmediate(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: setBoundsConstantMaxImmediate:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, 2047
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 2047)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBoundsConstantTooBigForImm(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: setBoundsConstantTooBigForImm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $1, $zero, 2048
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, $1
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 2048)
  ret ptr addrspace(200) %0
}

; Function Attrs: nounwind memory(none)
define ptr addrspace(200) @setBoundsNegative(ptr addrspace(200) %c) #1 {
; CHECK-LABEL: setBoundsNegative:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    daddiu $1, $zero, -2
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csetbounds $c3, $c3, $1
entry:
  %0 = tail call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %c, i64 -2)
  ret ptr addrspace(200) %0
}

attributes #0 = { nounwind willreturn memory(none) }
attributes #1 = { nounwind memory(none) }
