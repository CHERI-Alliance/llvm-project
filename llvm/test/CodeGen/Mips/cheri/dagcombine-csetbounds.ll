; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUNNOT: %cheri_purecap_llc -O2 -start-after=cheri-bound-allocas %s -o - -debug-only=dagcombine,mips-lower
; RUN: %cheri_purecap_llc -O2 -start-after=cheri-bound-allocas %s -o - | %cheri_FileCheck %s

; Function Attrs: nounwind
declare void @use(ptr addrspace(200)) local_unnamed_addr addrspace(200) #0

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200), i64) addrspace(200) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200), i64) addrspace(200) #1

; Function Attrs: nounwind willreturn memory(none)
declare ptr addrspace(200) @llvm.cheri.bounded.stack.cap.i64(ptr addrspace(200), i64) addrspace(200) #1

; Function Attrs: nounwind
define signext i32 @stack_array() local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: stack_array:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -80
; CHECK-NEXT:    csc $c18, $zero, 64($c11) # 16-byte Folded Spill
; CHECK-NEXT:    csc $c17, $zero, 48($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c18, $c11, 8
; CHECK-NEXT:    csetbounds $c18, $c18, 40
; CHECK-NEXT:    clcbi $c12, %capcall20(use)($c1)
; CHECK-NEXT:    cincoffset $c3, $c11, 8
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c3, 40
; CHECK-NEXT:    clw $2, $zero, 20($c18)
; CHECK-NEXT:    clc $c17, $zero, 48($c11) # 16-byte Folded Reload
; CHECK-NEXT:    clc $c18, $zero, 64($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 80
entry:
  %array = alloca [10 x i32], align 4, addrspace(200)
  %0 = bitcast ptr addrspace(200) %array to ptr addrspace(200)
  %1 = call ptr addrspace(200) @llvm.cheri.bounded.stack.cap.i64(ptr addrspace(200) %0, i64 40)
  %2 = bitcast ptr addrspace(200) %1 to ptr addrspace(200)
  %3 = bitcast ptr addrspace(200) %2 to ptr addrspace(200)
  %4 = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) nonnull %3, i64 40)
  call void @use(ptr addrspace(200) %4) #0
  %arrayidx = getelementptr inbounds i8, ptr addrspace(200) %4, i64 20
  %5 = bitcast ptr addrspace(200) %arrayidx to ptr addrspace(200)
  %6 = load i32, ptr addrspace(200) %5, align 4
  ret i32 %6
}

; Function Attrs: nounwind
define signext i32 @stack_int() local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: stack_int:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    addiu $1, $zero, 1
; CHECK-NEXT:    csw $1, $zero, 12($c11)
; CHECK-NEXT:    clcbi $c12, %capcall20(use)($c1)
; CHECK-NEXT:    cincoffset $c3, $c11, 12
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c3, 4
; CHECK-NEXT:    clw $2, $zero, 12($c11)
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %value = alloca i32, align 4, addrspace(200)
  %0 = bitcast ptr addrspace(200) %value to ptr addrspace(200)
  %1 = call ptr addrspace(200) @llvm.cheri.bounded.stack.cap.i64(ptr addrspace(200) %0, i64 4)
  %2 = bitcast ptr addrspace(200) %1 to ptr addrspace(200)
  %3 = bitcast ptr addrspace(200) %2 to ptr addrspace(200)
  store i32 1, ptr addrspace(200) %value, align 4
  %4 = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) nonnull %3, i64 4)
  call void @use(ptr addrspace(200) %4) #0
  %5 = load i32, ptr addrspace(200) %value, align 4
  ret i32 %5
}

; Function Attrs: nounwind
define signext i32 @stack_int_exact() local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: stack_int_exact:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c2, $c11, 12
; CHECK-NEXT:    csetbounds $c2, $c2, 4
; CHECK-NEXT:    addiu $1, $zero, 1
; CHECK-NEXT:    csw $1, $zero, 12($c11)
; CHECK-NEXT:    daddiu $1, $zero, 4
; CHECK-NEXT:    clcbi $c12, %capcall20(use)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetboundsexact $c3, $c2, $1
; CHECK-NEXT:    clw $2, $zero, 12($c11)
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
entry:
  %value = alloca i32, align 4, addrspace(200)
  %0 = bitcast ptr addrspace(200) %value to ptr addrspace(200)
  %1 = call ptr addrspace(200) @llvm.cheri.bounded.stack.cap.i64(ptr addrspace(200) %0, i64 4)
  %2 = bitcast ptr addrspace(200) %1 to ptr addrspace(200)
  %3 = bitcast ptr addrspace(200) %2 to ptr addrspace(200)
  store i32 1, ptr addrspace(200) %value, align 4
  %4 = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200) nonnull %3, i64 4)
  call void @use(ptr addrspace(200) %4) #0
  %5 = load i32, ptr addrspace(200) %value, align 4
  ret i32 %5
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) addrspace(200) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
