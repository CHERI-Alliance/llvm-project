; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_purecap_llc -float-abi=hard -cheri-cap-table-abi=pcrel %s -o - | %cheri_FileCheck %s -check-prefix CAPTABLE

@act_path_coeff = external hidden unnamed_addr addrspace(200) global [6 x double], align 8
@sites_on_node = external addrspace(200) global i32, align 4
@lattice = external addrspace(200) global ptr addrspace(200), align 32

declare noalias ptr addrspace(200) @calloc(i64 zeroext, i64 zeroext)

declare void @free(ptr addrspace(200) nocapture)

; Function Attrs: nounwind
define void @eo_fermion_force(double %eps, i32 signext %nflavors, i32 signext %x_off) #0 {
; CAPTABLE-LABEL: eo_fermion_force:
; CAPTABLE:       # %bb.0: # %entry
; CAPTABLE-NEXT:    cincoffset $c11, $c11, -80
; CAPTABLE-NEXT:    dmfc1 $1, $f28
; CAPTABLE-NEXT:    csd $1, $zero, 72($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    dmfc1 $1, $f27
; CAPTABLE-NEXT:    csd $1, $zero, 64($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    dmfc1 $1, $f26
; CAPTABLE-NEXT:    csd $1, $zero, 56($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    dmfc1 $1, $f25
; CAPTABLE-NEXT:    csd $1, $zero, 48($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    dmfc1 $1, $f24
; CAPTABLE-NEXT:    csd $1, $zero, 40($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    csd $16, $zero, 32($c11) # 8-byte Folded Spill
; CAPTABLE-NEXT:    csc $c18, $zero, 16($c11) # 16-byte Folded Spill
; CAPTABLE-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CAPTABLE-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CAPTABLE-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CAPTABLE-NEXT:    cgetpccincoffset $c18, $1
; CAPTABLE-NEXT:    clcbi $c1, %captab20(.LCPI0_0)($c18)
; CAPTABLE-NEXT:    cld $2, $zero, 0($c1)
; CAPTABLE-NEXT:    b .LBB0_20
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.1: # %for.cond.30.preheader
; CAPTABLE-NEXT:    dmtc1 $2, $f24
; CAPTABLE-NEXT:    neg.d $f26, $f24
; CAPTABLE-NEXT:    cld $1, $zero, 0($c1)
; CAPTABLE-NEXT:    div.d $f27, $f24, $f0
; CAPTABLE-NEXT:    neg.d $f28, $f0
; CAPTABLE-NEXT:    dmtc1 $1, $f25
; CAPTABLE-NEXT:    addiu $2, $zero, 1
; CAPTABLE-NEXT:  .LBB0_2: # %for.body.37
; CAPTABLE-NEXT:    # =>This Inner Loop Header: Depth=1
; CAPTABLE-NEXT:    bnez $2, .LBB0_2
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.3: # %if.then
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(u_shift_fermion)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:    addiu $16, $zero, 1
; CAPTABLE-NEXT:    beqz $16, .LBB0_6
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.4: # %if.then.48
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:  .LBB0_5: # %for.inc.172
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    b .LBB0_15
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  .LBB0_6: # %for.body.55
; CAPTABLE-NEXT:    # =>This Inner Loop Header: Depth=1
; CAPTABLE-NEXT:    bnez $zero, .LBB0_5
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.7: # %if.then.69
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    bnez $16, .LBB0_17
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.8: # %for.body.84.preheader
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    bnez $zero, .LBB0_12
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.9: # %if.then.105
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    bnez $zero, .LBB0_19
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.10: # %if.then.113
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f13, $f26
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f13, $f24
; CAPTABLE-NEXT:    bnez $zero, .LBB0_12
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.11: # %for.body.128.preheader
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(scalar_mult_add_su3_vector)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f12, $f27
; CAPTABLE-NEXT:  .LBB0_12: # %for.inc.143
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    b .LBB0_18
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.13: # %if.else.8.i.415
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f13, $f28
; CAPTABLE-NEXT:    bnez $zero, .LBB0_5
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  # %bb.14: # %for.body.157.preheader
; CAPTABLE-NEXT:    # in Loop: Header=BB0_6 Depth=1
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(scalar_mult_add_su3_vector)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f12, $f25
; CAPTABLE-NEXT:    b .LBB0_5
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  .LBB0_15: # %for.end.174
; CAPTABLE-NEXT:    b .LBB0_21
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  .LBB0_16: # %for.body.197
; CAPTABLE-NEXT:    # =>This Inner Loop Header: Depth=1
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(scalar_mult_add_su3_vector)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f12, $f25
; CAPTABLE-NEXT:    b .LBB0_16
; CAPTABLE-NEXT:    nop
; CAPTABLE-NEXT:  .LBB0_17: # %if.then.77
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:  .LBB0_18: # %if.then.6.i.413
; CAPTABLE-NEXT:    .insn
; CAPTABLE-NEXT:  .LBB0_19: # %if.else.i.critedge
; CAPTABLE-NEXT:    .insn
; CAPTABLE-NEXT:  .LBB0_20: # %for.body.24.lr.ph
; CAPTABLE-NEXT:    .insn
; CAPTABLE-NEXT:  .LBB0_21: # %if.then.182
; CAPTABLE-NEXT:    clcbi $c12, %capcall20(add_force_to_mom)($c18)
; CAPTABLE-NEXT:    daddiu $4, $zero, 0
; CAPTABLE-NEXT:    cjalr $c12, $c17
; CAPTABLE-NEXT:    mov.d $f13, $f24
entry:
  %0 = load double, ptr addrspace(200) getelementptr inbounds ([6 x double], ptr addrspace(200) @act_path_coeff, i64 0, i64 5), align 8
  %mul5 = fmul double undef, undef
  %mul6 = fmul double undef, 0.000000e+00
  %mul7 = fmul double undef, %0
  br i1 undef, label %for.body.24.lr.ph, label %for.cond.30.preheader

for.body.24.lr.ph:                                ; preds = %entry
  unreachable

for.cond.30.preheader:                            ; preds = %entry
  %sub51 = fsub double -0.000000e+00, undef
  %sub116 = fsub double -0.000000e+00, %mul6
  %div124 = fdiv double %mul6, %mul5
  %sub148 = fsub double -0.000000e+00, %mul5
  %div153 = fdiv double %mul5, undef
  %div193 = fdiv double %mul7, undef
  %cmp46 = icmp slt i64 0, 4
  br label %for.body.37

for.body.37:                                      ; preds = %for.inc.246, %for.cond.30.preheader
  %or.cond464 = or i1 undef, undef
  br i1 %or.cond464, label %for.inc.246, label %if.then

if.then:                                          ; preds = %for.body.37
  tail call void @u_shift_fermion(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef)
  br i1 %cmp46, label %if.then.48, label %for.body.55

if.then.48:                                       ; preds = %if.then
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %sub51)
  unreachable

for.body.55:                                      ; preds = %for.inc.172, %if.then
  br i1 undef, label %for.inc.172, label %if.then.69

if.then.69:                                       ; preds = %for.body.55
  br i1 %cmp46, label %if.then.77, label %for.body.84

if.then.77:                                       ; preds = %if.then.69
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %mul5)
  unreachable

for.body.84:                                      ; preds = %for.inc.143, %if.then.69
  br i1 undef, label %for.inc.143, label %if.then.105

if.then.105:                                      ; preds = %for.body.84
  br i1 %cmp46, label %if.then.113, label %if.else.i.critedge

if.then.113:                                      ; preds = %if.then.105
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %sub116)
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %mul6)
  br i1 undef, label %for.body.128, label %for.inc.143

if.else.i.critedge:                               ; preds = %if.then.105
  unreachable

for.body.128:                                     ; preds = %for.body.128, %if.then.113
  tail call void @scalar_mult_add_su3_vector(ptr addrspace(200) undef, ptr addrspace(200) undef, double %div124, ptr addrspace(200) undef)
  br i1 undef, label %for.body.128, label %for.inc.143

for.inc.143:                                      ; preds = %for.body.128, %if.then.113, %for.body.84
  br i1 undef, label %for.end.145, label %for.body.84

for.end.145:                                      ; preds = %for.inc.143
  br i1 %cmp46, label %if.then.6.i.413, label %if.else.8.i.415

if.then.6.i.413:                                  ; preds = %for.end.145
  unreachable

if.else.8.i.415:                                  ; preds = %for.end.145
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %sub148)
  br i1 undef, label %for.body.157, label %for.inc.172

for.body.157:                                     ; preds = %for.body.157, %if.else.8.i.415
  tail call void @scalar_mult_add_su3_vector(ptr addrspace(200) undef, ptr addrspace(200) undef, double %div153, ptr addrspace(200) undef)
  br i1 undef, label %for.body.157, label %for.inc.172

for.inc.172:                                      ; preds = %for.body.157, %if.else.8.i.415, %for.body.55
  %exitcond470 = icmp eq i32 undef, 8
  br i1 %exitcond470, label %for.end.174, label %for.body.55

for.end.174:                                      ; preds = %for.inc.172
  br i1 %cmp46, label %if.then.182, label %if.end.185

if.then.182:                                      ; preds = %for.end.174
  tail call void @add_force_to_mom(ptr addrspace(200) undef, ptr addrspace(200) undef, i32 signext undef, double %mul7)
  unreachable

if.end.185:                                       ; preds = %for.end.174
  br label %for.body.197

for.body.197:                                     ; preds = %for.body.197, %if.end.185
  tail call void @scalar_mult_add_su3_vector(ptr addrspace(200) undef, ptr addrspace(200) undef, double %div193, ptr addrspace(200) undef)
  br label %for.body.197

for.inc.246:                                      ; preds = %for.body.37
  br label %for.body.37
}

declare void @u_shift_fermion(ptr addrspace(200), ptr addrspace(200), i32 signext)

declare void @add_force_to_mom(ptr addrspace(200), ptr addrspace(200), i32 signext, double)

declare void @scalar_mult_add_su3_vector(ptr addrspace(200), ptr addrspace(200), double, ptr addrspace(200))

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p200(i64 immarg, ptr addrspace(200) nocapture) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p200(i64 immarg, ptr addrspace(200) nocapture) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noalias nocapture writeonly, ptr addrspace(200) noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
