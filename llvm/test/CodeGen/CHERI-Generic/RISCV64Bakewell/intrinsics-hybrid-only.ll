; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/intrinsics-hybrid-only.ll
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+zcheripurecap,+zcherihybrid,+f,+d -o - < %s | FileCheck %s --check-prefix=HYBRID
; This test checks target-independent CHERI intrinsics that are only available for hybrid code
; Pointer-Arithmetic Instructions
declare i64 @llvm.cheri.cap.to.pointer(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.from.pointer(i8 addrspace(200)*, i64)
declare i64 @llvm.cheri.cap.diff(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.ddc.get()
; Dummy declaration so that the file is not empty for some targets
define i8 addrspace(200)* @dummy(i8 addrspace(200)* %ptr) nounwind {
; HYBRID-LABEL: dummy:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  ret i8 addrspace(200)* %ptr
}
define i64 @to_pointer_ddc_relative(i8 addrspace(200)* %cap) nounwind {
; HYBRID-LABEL: to_pointer_ddc_relative:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    gctag a1, ca0
; HYBRID-NEXT:    neg a1, a1
; HYBRID-NEXT:    and a0, a0, a1
; HYBRID-NEXT:    ret
  %ddc = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  %ptr = call i64 @llvm.cheri.cap.to.pointer(i8 addrspace(200)* %ddc, i8 addrspace(200)* %cap)
  ret i64 %ptr
}
define i8 addrspace(200)* @from_ddc(i64 %ptr) nounwind {
; HYBRID-LABEL: from_ddc:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    csrrc ca1, ddc, zero
; HYBRID-NEXT:    bnez a0, .LBB2_2
; HYBRID-NEXT:  # %bb.1:
; HYBRID-NEXT:    cmv ca0, cnull
; HYBRID-NEXT:    ret
; HYBRID-NEXT:  .LBB2_2:
; HYBRID-NEXT:    scaddr ca0, ca1, a0
; HYBRID-NEXT:    ret
  %ddc = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  %cap = call i8 addrspace(200)* @llvm.cheri.cap.from.pointer(i8 addrspace(200)* %ddc, i64 %ptr)
  ret i8 addrspace(200)* %cap
}
define i8 addrspace(200)* @ddc_get() nounwind {
; HYBRID-LABEL: ddc_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    csrrc ca0, ddc, zero
; HYBRID-NEXT:    ret
  %cap = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  ret i8 addrspace(200)* %cap
}
; PURECAP-ERROR: LLVM ERROR: Cannot select: intrinsic %llvm.cheri.ddc.get
