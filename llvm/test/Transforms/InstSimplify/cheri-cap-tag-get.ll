; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=instsimplify -S %s -o - | FileCheck %s

target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"
target triple = "cheri-unknown-freebsd"

declare i1 @llvm.cheri.cap.tag.get(ptr addrspace(200)) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @llvm.cheri.cap.tag.clear(ptr addrspace(200)) addrspace(200)

define i1 @unknown(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @unknown(
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[PTR:%.*]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %ptr)
  ret i1 %tag
}

define i1 @tag_cleared(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @tag_cleared(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.tag.clear(ptr addrspace(200) %ptr)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @gettag_null(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @gettag_null(
; CHECK-NEXT:    ret i1 false
;
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) null)
  ret i1 %tag
}

define i1 @gettag_inttoptr(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @gettag_inttoptr(
; CHECK-NEXT:    ret i1 false
;
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) inttoptr (i64 1 to ptr addrspace(200)))
  ret i1 %tag
}

define i1 @incoffset_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @incoffset_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = getelementptr i8, ptr addrspace(200) [[PTR:%.*]], i64 1
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = getelementptr i8, ptr addrspace(200) %ptr, i64 1
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setoffset_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @setoffset_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) [[PTR:%.*]], i64 1)
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) %ptr, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setaddr_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @setaddr_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) [[PTR:%.*]], i64 1)
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) %ptr, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setbounds_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @setbounds_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) [[PTR:%.*]], i64 1)
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) %ptr, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setboundsexact_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @setboundsexact_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200) [[PTR:%.*]], i64 1)
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200) %ptr, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @andperm_nonnull(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @andperm_nonnull(
; CHECK-NEXT:    [[CLEARED:%.*]] = call ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200) [[PTR:%.*]], i64 1)
; CHECK-NEXT:    [[TAG:%.*]] = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) [[CLEARED]])
; CHECK-NEXT:    ret i1 [[TAG]]
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200) %ptr, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}


; Now check that when used on null-derived values it will be folded to zero:
define i1 @incoffset_null(ptr addrspace(200) %ptr) addrspace(200) {
; CHECK-LABEL: @incoffset_null(
; CHECK-NEXT:    ret i1 false
;
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) getelementptr (i8, ptr addrspace(200) null, i64 1))
  ret i1 %tag
}

define i1 @setoffset_null() addrspace(200) {
; CHECK-LABEL: @setoffset_null(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.offset.set.i64(ptr addrspace(200) null, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setaddr_null() addrspace(200) {
; CHECK-LABEL: @setaddr_null(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.address.set.i64(ptr addrspace(200) null, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setbounds_null() addrspace(200) {
; CHECK-LABEL: @setbounds_null(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.i64(ptr addrspace(200) null, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @setboundsexact_null() addrspace(200) {
; CHECK-LABEL: @setboundsexact_null(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.bounds.set.exact.i64(ptr addrspace(200) null, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}

define i1 @andperm_null() addrspace(200) {
; CHECK-LABEL: @andperm_null(
; CHECK-NEXT:    ret i1 false
;
  %cleared = call ptr addrspace(200) @llvm.cheri.cap.perms.and.i64(ptr addrspace(200) null, i64 1)
  %tag = call i1 @llvm.cheri.cap.tag.get(ptr addrspace(200) %cleared)
  ret i1 %tag
}
